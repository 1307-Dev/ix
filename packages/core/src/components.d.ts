/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Buttons } from "./components/utils/button-variants";
import { FilterState } from "./components/category-filter/filter-state";
import { InputState } from "./components/category-filter/input-state";
import { Placement, PositioningStrategy } from "@popperjs/core";
import { FlipTileState } from "./components/flip-tile/flip-tile-state";
import { LegalLinkLanguage } from "./components/menu-about/imprint-language";
import { ModalConfig } from "./components/modal/modal";
import { ToastConfig, ToastType } from "./components/toast/toast";
import { TypedEvent } from "./components/utils/typed-event";
import { TreeContext, TreeItemContext, TreeModel, UpdateCallback } from "./components/tree/tree-model";
import { UploadFileState } from "./components/upload/upload-file-state";
export namespace Components {
    interface CwAnimatedTab {
        /**
          * Show notification number
         */
        "count": number;
        /**
          * Icon of the tab
         */
        "icon": string;
    }
    interface CwAnimatedTabs {
        /**
          * @deprecated - For debugging purposes only
         */
        "disableAnimations": boolean;
        /**
          * Current selected tab index
         */
        "selectedIndex": number;
        /**
          * Placement of the tabs
         */
        "tabPlacement": 'top' | 'bottom';
    }
    interface CwApplicationHeader {
        /**
          * Application name
         */
        "name": string;
    }
    interface CwBasicNavigation {
        /**
          * Application name
         */
        "applicationName": string;
        /**
          * Hide application header
         */
        "hideHeader": boolean;
    }
    interface CwBlind {
        /**
          * Collapsed state
         */
        "collapsed": boolean;
        /**
          * Label of blind
         */
        "label": string;
    }
    interface CwBreadcrumb {
        /**
          * Ghost breadcrumbs will not show solid backgrounds on individual crumbs unless there is a mouse event (e.g. hover)
         */
        "ghost": boolean;
        /**
          * Items will be accessible through a dropdown
         */
        "nextItems": string[];
        /**
          * Excess items will get hidden inside of dropdown
         */
        "visibleItemCount": number;
    }
    interface CwBreadcrumbItem {
        /**
          * Icon to be displayed next ot the label
         */
        "icon": string;
        /**
          * Breadcrumb label
         */
        "label": string;
    }
    interface CwButton {
        /**
          * Disable the button
         */
        "disabled": boolean;
        /**
          * Button with no background or outline
         */
        "ghost": boolean;
        /**
          * Invisible button
          * @deprecated use ghost property
         */
        "invisible": boolean;
        /**
          * Outline button
         */
        "outline": boolean;
        /**
          * Show button as selected. Should be used with outline or invisible
         */
        "selected": boolean;
        /**
          * Button varaint
         */
        "variant": Buttons;
    }
    interface CwCategoryFilter {
        /**
          * Configuration object hash used to populate the dropwdown menu for typeahead and quick selection functionality. Each ID maps to an object with a label and an array of options to select from.
         */
        "categories": {
    [id: string]: {
      label: string;
      options: string[];
    };
  };
        /**
          * A set of search criteria to populate the component with.
         */
        "filterState": FilterState;
        /**
          * Allows to hide the icon inside the text input. Defaults to false
         */
        "hideIcon": boolean;
        /**
          * i18n
         */
        "i18nPlainText": string;
        /**
          * The icon next to the actual text input Defaults to 'search'
         */
        "icon": string;
        /**
          * When set this will initially populate the component with the provided search criteria. This will trigger all input events accordingly.
          * @deprecated will get removed with next major release (7.0.0). Use the member filterState instead.
         */
        "initialState": FilterState;
        /**
          * i18n
         */
        "labelCategories": string;
        /**
          * In certain use cases some categories are not available for selection any more. To allow proper display of set filters with these categories this ID to label mapping can be populated. Configuration object hash used to supply labels to the filter chips in the input field. Each ID maps to a string representing the label to display.
         */
        "nonSelectableCategories"?: {
    [id: string]: string;
  };
        /**
          * Placeholder text to be displayed in an empty input field.
         */
        "placeholder": string;
        /**
          * If set to true allows that a single category can be set more than once. An already set category will not appear in the category dropdown if set to false.  Defaults to true
         */
        "repeatCategories": boolean;
        /**
          * A list of strings that will be supplied as typeahead suggestions not tied to any categories.
         */
        "suggestions": string[];
        /**
          * @deprecated For debugging purposes only!
         */
        "tmpDisableScrollIntoView": boolean;
    }
    interface CwChip {
        /**
          * Display chip in active state. Only working witht `variant="primary"`
         */
        "active": boolean;
        /**
          * Custom color for pill. Only working for `variant='custom'`
         */
        "background": string | undefined;
        /**
          * Show close icon
         */
        "closable": boolean;
        /**
          * Custom font color for pill. Only working for `variant='custom'`
         */
        "color": string | undefined;
        /**
          * Show icon
         */
        "icon": string | undefined;
        /**
          * Show chip with outline style
         */
        "outline": boolean;
        /**
          * Chip variant
         */
        "variant": 'primary' | 'alarm' | 'critical' | 'warning' | 'info' | 'neutral' | 'success' | 'custom';
    }
    interface CwCounterPill {
        /**
          * Align pill content left
         */
        "alignLeft": boolean;
        /**
          * Custom color for pill. Only working for `variant='custom'`
         */
        "background": string | undefined;
        /**
          * Custom font color for pill. Only working for `variant='custom'`
         */
        "color": string | undefined;
        /**
          * Show pill as outline
         */
        "outline": boolean;
        /**
          * Pill variant
         */
        "variant": 'primary' | 'alarm' | 'critical' | 'warning' | 'info' | 'neutral' | 'success' | 'custom';
    }
    interface CwDrawer {
        /**
          * Fired in case of an outside click during drawer showed state
         */
        "closeOnClickOutside": boolean;
        /**
          * Render the drawer with maximum height
         */
        "fullHeight": boolean;
        /**
          * Max width interpreted as REM
         */
        "maxWidth": number;
        /**
          * Min width interpreted as REM
         */
        "minWidth": number;
        /**
          * Show or hide the drawer
         */
        "show": boolean;
        /**
          * Toggle or define show state of drawer
          * @param show Overwrite toggle state with boolean
         */
        "toggleDrawer": (show: boolean) => Promise<void>;
        /**
          * Width interpreted as REM if not set to 'auto'
         */
        "width": number | 'auto';
    }
    interface CwDropdown {
        /**
          * Adjust dropdown width to the parent width
         */
        "adjustDropdownWidthToReferenceWidth": boolean;
        /**
          * Adjust dropdown width to the parent width
          * @deprecated - property has a typo and will get removed in the next major version. Use `adjustDropdownWidthToReferenceWidth` instead.
         */
        "adjustDropdownWidthToReferenceWith": boolean;
        /**
          * Define an anchor element
         */
        "anchor": string | HTMLElement;
        /**
          * Close behavior
         */
        "closeBehavior": 'inside' | 'outside' | 'both' | boolean;
        /**
          * An optional header shown at the top of the dropdown
         */
        "header"?: string;
        /**
          * Placement of the dropdown
         */
        "placement": Placement;
        /**
          * Position strategy
         */
        "positioningStrategy": PositioningStrategy;
        /**
          * Show dropdown
         */
        "show": boolean;
        /**
          * Define an element that triggers the dropdown. A trigger can either be a string that will be interprated as id attribute or a DOM element.
         */
        "trigger": string | HTMLElement;
        /**
          * Update position of dropdown
         */
        "updatePosition": () => Promise<void>;
    }
    interface CwDropdownItem {
        /**
          * Whether the item is checked or not. If true a checkmark will mark the item as checked.
         */
        "checked": boolean;
        /**
          * Disable item and remove event listeners
         */
        "disabled": boolean;
        /**
          * Internal usage only
         */
        "emitItemClick": () => Promise<void>;
        /**
          * Display hover state
         */
        "hover": boolean;
        /**
          * Icon of dropdown item
         */
        "icon": string;
        /**
          * Label of dropdown item
         */
        "label": string;
    }
    interface CwEventList {
        /**
          * Animate state change transitions. Defaults to 'true'.
         */
        "animated": boolean;
        /**
          * Display a chevron icon in list items. Defaults to 'false'
         */
        "chevron": boolean;
        /**
          * Make event-list items more compact
         */
        "compact": boolean;
        /**
          * Determines the height of list items. This can either be one of two predefined sizes ('S' or 'L') or an absolute pixel value. In case a number is supplied it will get converted to rem internally. Defaults to 'S'.
         */
        "itemHeight": 'S' | 'L' | number;
    }
    interface CwEventListItem {
        /**
          * Show chevron on right side of the event list item
         */
        "chevron": boolean;
        /**
          * Color of the status indicator. Allowed values are all Core UI color names.
         */
        "color": string;
        /**
          * Disable event list item
         */
        "disabled": boolean;
        /**
          * Opacity of the status indicator. Defaults to 1.0
          * @deprecated Will be removed in 7.0.0. Use color with alpha value.
         */
        "opacity": number;
        /**
          * Show event list item as selected
         */
        "selected": boolean;
    }
    interface CwExpandingSearch {
        /**
          * Search icon
         */
        "icon": string;
        /**
          * Placeholder text
         */
        "placeholder": string;
        /**
          * Default value
         */
        "value": string;
    }
    interface CwFilterChip {
        /**
          * If true the filter chip will be in disabled state
         */
        "disabled": boolean;
    }
    interface CwFlipTile {
        /**
          * Tmp property name
         */
        "footer": string;
        /**
          * Variation of the Flip
         */
        "state": FlipTileState;
    }
    interface CwFlipTileContent {
    }
    interface CwGroup {
        /**
          * Whether the group is collapsed or expanded. Defaults to true.
         */
        "collapsed": boolean;
        /**
          * Expand the group if the header is clicked
         */
        "expandOnHeaderClick": boolean;
        /**
          * Group header
         */
        "header": string;
        /**
          * The index of the selected group entry. If undefined no group item is selected.
         */
        "index": number;
        /**
          * Whether the group is selected.
         */
        "selected": boolean;
        /**
          * Group header subtitle
         */
        "subHeader": string;
        /**
          * Suppress
         */
        "suppressHeaderSelection": boolean;
    }
    interface CwGroupDropdownItem {
        /**
          * Group dropdown icon
         */
        "icon": string;
        /**
          * Group dropdown label
         */
        "label": string;
    }
    interface CwGroupItem {
        /**
          * Group item icon
         */
        "icon": string;
        /**
          * Index
         */
        "index": number;
        /**
          * Group item secondary text
         */
        "secondaryText": string;
        /**
          * Show selected state
         */
        "selected": boolean;
        /**
          * Supress the selection of the group
         */
        "suppressSelection": boolean;
        /**
          * Group item text
         */
        "text": string;
    }
    interface CwIcon {
        /**
          * Color of the icon
         */
        "color": string;
        /**
          * Use one of our defined icon names e.g `copy`.
         */
        "name": string;
        /**
          * Size of the icon
         */
        "size": '16' | '24' | '32';
    }
    interface CwIconButton {
        /**
          * Color of icon in  button
         */
        "color": string;
        /**
          * Disabled
         */
        "disabled": boolean;
        /**
          * Button invisible
         */
        "ghost": boolean;
        /**
          * Button icon
         */
        "icon": string;
        /**
          * Button invisible
          * @deprecated use ghost property
         */
        "invisible": boolean;
        /**
          * Button outline
         */
        "outline": boolean;
        /**
          * Button in oval shape
         */
        "oval": boolean;
        /**
          * Selected state only working with outline or invisible
         */
        "selected": boolean;
        /**
          * Size of icon in button
         */
        "size": '32' | '24' | '16';
        /**
          * Variant of button
         */
        "variant": 'Primary' | 'Secondary';
    }
    interface CwInputGroup {
    }
    interface CwMapNavigation {
        /**
          * Application name
         */
        "appName": string;
        /**
          * Close current shown overlay
         */
        "closeOverlay": () => Promise<void>;
        /**
          * Hide the sidebar context menu button when set to true
         */
        "hideContextMenu": boolean;
        /**
          * Navigation title
         */
        "navTitle": string;
        /**
          * Open a overlay inside content area
          * @param name
          * @param component
          * @param icon
          * @param color
         */
        "openOverlay": (name: string, component: HTMLElement, icon?: string, color?: string) => Promise<void>;
    }
    interface CwMapNavigationOverlay {
        /**
          * Color of icon
         */
        "color": string;
        /**
          * Icon of overlay
         */
        "icon": string;
        /**
          * Title of overlay
         */
        "name": string;
    }
    interface CwMenu {
        /**
          * Should only be set if you use cw-menu standalone
         */
        "applicationDescription": string;
        /**
          * Should only be set if you use cw-menu standalone
         */
        "applicationName": string;
        /**
          * Internal
         */
        "enableMapExpand": boolean;
        /**
          * Is settings tab is visible
         */
        "enableSettings": boolean;
        /**
          * @deprecated Show toggle theme button
         */
        "enableToggleTheme": boolean;
        /**
          * Expand menu
         */
        "expand": boolean;
        "i18nCollapse": string;
        "i18nExpand": string;
        "i18nLegal": string;
        "i18nMore": string;
        "i18nSettings": string;
        "i18nToggleTheme": string;
        /**
          * Maximum number of menu items to show in case enough vertical space is available. Extra menu items will be collapsed to 'show more' menu item.
         */
        "maxVisibleMenuItems": number;
        /**
          * Is about tab visible
         */
        "showAbout": boolean;
        /**
          * Is settings tab visible
         */
        "showSettings": boolean;
        /**
          * Toggle About tabs
          * @param show
         */
        "toggleAbout": (show: boolean) => Promise<void>;
        /**
          * Toggle map sidebar expand
          * @param show
         */
        "toggleMapExpand": (show?: boolean) => Promise<void>;
        /**
          * Toggle menu
          * @param show
         */
        "toggleMenu": (show?: boolean) => Promise<void>;
        /**
          * Toggle Settings tabs
          * @param show
         */
        "toggleSettings": (show: boolean) => Promise<void>;
    }
    interface CwMenuAbout {
        /**
          * Active tab
         */
        "activeTabLabel": string;
        /**
          * Should only be set if you use cw-menu standalone
         */
        "applicationDescription": string;
        /**
          * Should only be set if you use cw-menu standalone
         */
        "applicationName": string;
        /**
          * Copyright
         */
        "copyrightYears": string;
        "i18nCookieNoticeLabel": string;
        "i18nCorporateLabel": string;
        "i18nDigitalId": string;
        "i18nImprintLabel": string;
        "i18nPrivacyNoticeLabel": string;
        "i18nTermsOfUseLabel": string;
        /**
          * Language of the links in the About & Legal Tab
         */
        "imprintLanguage": LegalLinkLanguage;
        /**
          * Label of first tab
         */
        "label": string;
        /**
          * Internal
         */
        "show": boolean;
    }
    interface CwMenuAboutItem {
        /**
          * About Item label
         */
        "label": string;
    }
    interface CwMenuAboutNews {
        /**
          * Subtitle of the about news
         */
        "aboutItemLabel": string;
        /**
          * Internal
         */
        "expanded": boolean;
        "i18nShowMore": string;
        /**
          * Title of the about news
         */
        "label": string;
        /**
          * Bottom offset
         */
        "offsetBottom": number;
        /**
          * Show about news
         */
        "show": boolean;
    }
    interface CwMenuAvatar {
        /**
          * Second line of text
         */
        "bottom": string;
        "i18nLogout": string;
        /**
          * First line of text
         */
        "top": string;
    }
    interface CwMenuAvatarItem {
        /**
          * Avatar dropdown icon
         */
        "icon": string;
        /**
          * Avatar dropdown label
         */
        "label": string;
    }
    interface CwMenuItem {
        /**
          * State to display active
         */
        "active": boolean;
        /**
          * Place tab on bottom
         */
        "bottom": boolean;
        /**
          * Disable tab and remove event handlers
         */
        "disabled": boolean;
        /**
          * Move the Tab to a top position.
         */
        "home": boolean;
        /**
          * Show notification cound on tab
         */
        "notifications": number;
        /**
          * Icon name from @siemens/core-ui-icons
         */
        "tabIcon": string;
    }
    interface CwMenuSettings {
        /**
          * active tab
         */
        "activeTabLabel": string;
        /**
          * Label
         */
        "label": string;
        /**
          * Internal
         */
        "show": boolean;
    }
    interface CwMenuSettingsItem {
        /**
          * Label
         */
        "label": string;
    }
    interface CwMessageBar {
        /**
          * If true, close button is enabled and alert can be dismissed by the user
         */
        "dismissible": boolean;
        /**
          * Specifies the type of the alert.
         */
        "type": 'danger' | 'warning' | 'info';
    }
    interface CwModal {
        /**
          * Should the modal be animtated
         */
        "animation": boolean;
        "ariaDescribedBy": string;
        "ariaLabelledBy": string;
        /**
          * Adds a dimming layer to the modal. This should only be used when it it necessary to focus the user's attention to the dialog content (e.g. errors, warnings, complex tasks).
         */
        "backdrop": boolean | 'static';
        /**
          * Backdrop class
         */
        "backdropClass": string;
        /**
          * BeforeDismiss callbacl
         */
        "beforeDismiss": () => boolean | Promise<boolean>;
        /**
          * Centered modal
         */
        "centered": boolean;
        /**
          * Close modal
          * @param result
         */
        "close": (result: any) => Promise<void>;
        /**
          * Content of modal
         */
        "content": HTMLElement | string;
        /**
          * Dismiss modal instance
          * @param reason
         */
        "dismiss": (reason?: any) => Promise<void>;
        /**
          * Header title
         */
        "headerTitle": string;
        /**
          * ESC close modal dialog
         */
        "keyboard": boolean;
        /**
          * Modal dialog class
         */
        "modalDialogClass": string;
        /**
          * Modal scollable
         */
        "scrollable": boolean;
        /**
          * Modal size
         */
        "size": 'sm' | 'lg' | 'xl';
        /**
          * Window class
         */
        "windowClass": string;
    }
    interface CwModalContainer {
        /**
          * Display modal dialog
          * @param config
         */
        "showModal": (config: ModalConfig) => Promise<void>;
    }
    interface CwModalExample {
    }
    interface CwPill {
        /**
          * Align pill content left
         */
        "alignLeft": boolean;
        /**
          * Custom color for pill. Only working for `variant='custom'`
         */
        "background": string | undefined;
        /**
          * Custom font color for pill. Only working for `variant='custom'`
         */
        "color": string | undefined;
        /**
          * Show icon
         */
        "icon": string | undefined;
        /**
          * Show pill as outline
         */
        "outline": boolean;
        /**
          * Pill variant
         */
        "variant": 'primary' | 'alarm' | 'critical' | 'warning' | 'info' | 'neutral' | 'success' | 'custom';
    }
    interface CwSelect {
        /**
          * Show clear button
         */
        "allowClear": boolean;
        /**
          * If true the select will be in disabled state
         */
        "disabled": boolean;
        /**
          * Select is extendable
         */
        "editable": boolean;
        /**
          * Input field placeholder
         */
        "i18nPlaceholder": string;
        /**
          * Input field placeholder for editable select
         */
        "i18nPlaceholderEditable": string;
        /**
          * Select list header
         */
        "i18nSelectListHeader": string;
        /**
          * Selection mode
         */
        "mode": 'single' | 'multiple';
        /**
          * If true the select will be in readonly mode
         */
        "readonly": boolean;
        /**
          * Indices of selected items
         */
        "selectedIndices": string | string[];
    }
    interface CwSelectItem {
        /**
          * ***Internal***
         */
        "hover": boolean;
        /**
          * Displayed name of the item
         */
        "label": string;
        /**
          * Internal
          * @param event
         */
        "onItemClick": (event?: CustomEvent<HTMLCwDropdownItemElement>) => Promise<void>;
        /**
          * Whether the item is selected.
         */
        "selected": boolean;
        /**
          * Item value
         */
        "value": any;
    }
    interface CwSpinner {
        /**
          * Size of spinner
         */
        "size": 'medium' | 'large';
        /**
          * Variant of spinner
         */
        "variant": 'primary' | 'sencodary' | 'secondary';
    }
    interface CwSplitButton {
        /**
          * Disabled
         */
        "disabled": boolean;
        /**
          * Button invisible
         */
        "ghost": boolean;
        /**
          * Button icon
         */
        "icon": string;
        /**
          * Button invisible
          * @deprecated use ghost property
         */
        "invisible": boolean;
        /**
          * Button label
         */
        "label": string;
        /**
          * Button outline variant
         */
        "outline": boolean;
        /**
          * Placement of the dropdown
         */
        "placement": Placement;
        /**
          * Splitbutton icon
         */
        "splitIcon": string;
        /**
          * Color variant of button
         */
        "variant": Buttons;
    }
    interface CwSplitButtonItem {
        /**
          * Dropdown icon
         */
        "icon": string;
        /**
          * Dropdown label
         */
        "label": string;
    }
    interface CwTabItem {
        /**
          * Set disabled tab
         */
        "disabled": boolean;
        /**
          * Set icon only tab
         */
        "icon": boolean;
        /**
          * Set layout width style
         */
        "layout": 'auto' | 'stretched';
        /**
          * Set selected placement
         */
        "placement": 'bottom' | 'top';
        /**
          * Set selected tab
         */
        "selected": boolean;
        /**
          * Set small size tab
         */
        "small": boolean;
    }
    interface CwTabs {
        /**
          * Set layout width style
         */
        "layout": 'auto' | 'stretched';
        /**
          * Set placement style
         */
        "placement": 'bottom' | 'top';
        /**
          * Set default selected tab by index
         */
        "selected": number;
        /**
          * Set tab items to small size
         */
        "small": boolean;
    }
    interface CwTile {
        /**
          * Size of the tile - one of 'small', 'medium' or 'large'
         */
        "size": 'small' | 'medium' | 'big';
    }
    interface CwToast {
        /**
          * Autoclose behavior
         */
        "autoClose": boolean;
        /**
          * Autoclose title after delay
         */
        "autoCloseDelay": number;
        /**
          * Icon of toast
         */
        "icon": string;
        /**
          * Icon color of toast
         */
        "iconColor": string;
        /**
          * Toast title
         */
        "toastTitle": string;
        /**
          * Toast type
         */
        "type": ToastType;
    }
    interface CwToastContainer {
        "containerClass": string;
        "containerId": string;
        /**
          * Internal Get event notifier from container element
          * @returns
         */
        "getEvents": () => Promise<TypedEvent<ToastConfig>>;
        "position": string;
        /**
          * Display a toast message
          * @param config
         */
        "showToast": (config: ToastConfig) => Promise<void>;
    }
    interface CwToggle {
        /**
          * Whether the slide-toggle element is checked or not.
         */
        "checked": boolean;
        /**
          * Basic and status colors from color palette
         */
        "color": string;
        /**
          * Whether the slide-toggle element is disabled or not.
         */
        "disabled": boolean;
        /**
          * Hide `on` and `off` text
         */
        "hideText": boolean;
        /**
          * Test for toggle off
         */
        "textOff": string;
        /**
          * Text for toggle on
         */
        "textOn": string;
    }
    interface CwTree {
        /**
          * Selection and collapsed state management
         */
        "context": TreeContext;
        /**
          * Tree modal
         */
        "model": TreeModel<any>;
        /**
          * Render function of tree items
         */
        "renderItem": (index: number, data: any, dataList: Array<any>, context: TreeContext, update: (callback: UpdateCallback) => void) => HTMLElement;
        /**
          * Initial root element will not be rendered
         */
        "root": string;
    }
    interface CwTreeItem {
        /**
          * Context
         */
        "context": TreeItemContext;
        /**
          * Has tree item children
         */
        "hasChildren": boolean;
        /**
          * Text
         */
        "text": string;
    }
    interface CwUpload {
        /**
          * The accept attribute specifies the types of files that the server accepts (that can be submitted through a file upload). [accept]{@link https ://www.w3schools.com/tags/att_input_accept.asp}
         */
        "accept": string;
        /**
          * Disable all input events
         */
        "disabled": boolean;
        /**
          * Label for upload file button
         */
        "i18nUploadFile": string;
        /**
          * Will be used by state = UploadFileState.LOADING
         */
        "loadingText": string;
        /**
          * If multiple is true the user can drop or select multiple files
         */
        "multiple": boolean;
        /**
          * Will be used by state = UploadFileState.SELECT_FILE
         */
        "selectFileText": string;
        /**
          * Set files
          * @param obj
         */
        "setFilesToUpload": (obj: any) => Promise<void>;
        /**
          * After a file is uploaded you can set the upload component to a defined state
         */
        "state": UploadFileState;
        /**
          * Will be used by state = UploadFileState.UPLOAD_FAILED
         */
        "uploadFailedText": string;
        /**
          * Will be used by state = UploadFileState.UPLOAD_SUCCESSED
         */
        "uploadSuccessText": string;
    }
    interface MyComponent {
    }
}
export interface CwAnimatedTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwAnimatedTabsElement;
}
export interface CwBlindCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwBlindElement;
}
export interface CwBreadcrumbCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwBreadcrumbElement;
}
export interface CwCategoryFilterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwCategoryFilterElement;
}
export interface CwChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwChipElement;
}
export interface CwDrawerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwDrawerElement;
}
export interface CwDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwDropdownElement;
}
export interface CwDropdownItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwDropdownItemElement;
}
export interface CwEventListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwEventListItemElement;
}
export interface CwExpandingSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwExpandingSearchElement;
}
export interface CwFilterChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwFilterChipElement;
}
export interface CwGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwGroupElement;
}
export interface CwGroupItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwGroupItemElement;
}
export interface CwMapNavigationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwMapNavigationElement;
}
export interface CwMapNavigationOverlayCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwMapNavigationOverlayElement;
}
export interface CwMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwMenuElement;
}
export interface CwMenuAboutCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwMenuAboutElement;
}
export interface CwMenuAboutNewsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwMenuAboutNewsElement;
}
export interface CwMenuAvatarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwMenuAvatarElement;
}
export interface CwMenuAvatarItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwMenuAvatarItemElement;
}
export interface CwMenuSettingsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwMenuSettingsElement;
}
export interface CwMessageBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwMessageBarElement;
}
export interface CwModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwModalElement;
}
export interface CwModalExampleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwModalExampleElement;
}
export interface CwSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwSelectElement;
}
export interface CwSelectItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwSelectItemElement;
}
export interface CwSplitButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwSplitButtonElement;
}
export interface CwSplitButtonItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwSplitButtonItemElement;
}
export interface CwToastCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwToastElement;
}
export interface CwToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwToggleElement;
}
export interface CwTreeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwTreeElement;
}
export interface CwTreeItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwTreeItemElement;
}
export interface CwUploadCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLCwUploadElement;
}
declare global {
    interface HTMLCwAnimatedTabElement extends Components.CwAnimatedTab, HTMLStencilElement {
    }
    var HTMLCwAnimatedTabElement: {
        prototype: HTMLCwAnimatedTabElement;
        new (): HTMLCwAnimatedTabElement;
    };
    interface HTMLCwAnimatedTabsElement extends Components.CwAnimatedTabs, HTMLStencilElement {
    }
    var HTMLCwAnimatedTabsElement: {
        prototype: HTMLCwAnimatedTabsElement;
        new (): HTMLCwAnimatedTabsElement;
    };
    interface HTMLCwApplicationHeaderElement extends Components.CwApplicationHeader, HTMLStencilElement {
    }
    var HTMLCwApplicationHeaderElement: {
        prototype: HTMLCwApplicationHeaderElement;
        new (): HTMLCwApplicationHeaderElement;
    };
    interface HTMLCwBasicNavigationElement extends Components.CwBasicNavigation, HTMLStencilElement {
    }
    var HTMLCwBasicNavigationElement: {
        prototype: HTMLCwBasicNavigationElement;
        new (): HTMLCwBasicNavigationElement;
    };
    interface HTMLCwBlindElement extends Components.CwBlind, HTMLStencilElement {
    }
    var HTMLCwBlindElement: {
        prototype: HTMLCwBlindElement;
        new (): HTMLCwBlindElement;
    };
    interface HTMLCwBreadcrumbElement extends Components.CwBreadcrumb, HTMLStencilElement {
    }
    var HTMLCwBreadcrumbElement: {
        prototype: HTMLCwBreadcrumbElement;
        new (): HTMLCwBreadcrumbElement;
    };
    interface HTMLCwBreadcrumbItemElement extends Components.CwBreadcrumbItem, HTMLStencilElement {
    }
    var HTMLCwBreadcrumbItemElement: {
        prototype: HTMLCwBreadcrumbItemElement;
        new (): HTMLCwBreadcrumbItemElement;
    };
    interface HTMLCwButtonElement extends Components.CwButton, HTMLStencilElement {
    }
    var HTMLCwButtonElement: {
        prototype: HTMLCwButtonElement;
        new (): HTMLCwButtonElement;
    };
    interface HTMLCwCategoryFilterElement extends Components.CwCategoryFilter, HTMLStencilElement {
    }
    var HTMLCwCategoryFilterElement: {
        prototype: HTMLCwCategoryFilterElement;
        new (): HTMLCwCategoryFilterElement;
    };
    interface HTMLCwChipElement extends Components.CwChip, HTMLStencilElement {
    }
    var HTMLCwChipElement: {
        prototype: HTMLCwChipElement;
        new (): HTMLCwChipElement;
    };
    interface HTMLCwCounterPillElement extends Components.CwCounterPill, HTMLStencilElement {
    }
    var HTMLCwCounterPillElement: {
        prototype: HTMLCwCounterPillElement;
        new (): HTMLCwCounterPillElement;
    };
    interface HTMLCwDrawerElement extends Components.CwDrawer, HTMLStencilElement {
    }
    var HTMLCwDrawerElement: {
        prototype: HTMLCwDrawerElement;
        new (): HTMLCwDrawerElement;
    };
    interface HTMLCwDropdownElement extends Components.CwDropdown, HTMLStencilElement {
    }
    var HTMLCwDropdownElement: {
        prototype: HTMLCwDropdownElement;
        new (): HTMLCwDropdownElement;
    };
    interface HTMLCwDropdownItemElement extends Components.CwDropdownItem, HTMLStencilElement {
    }
    var HTMLCwDropdownItemElement: {
        prototype: HTMLCwDropdownItemElement;
        new (): HTMLCwDropdownItemElement;
    };
    interface HTMLCwEventListElement extends Components.CwEventList, HTMLStencilElement {
    }
    var HTMLCwEventListElement: {
        prototype: HTMLCwEventListElement;
        new (): HTMLCwEventListElement;
    };
    interface HTMLCwEventListItemElement extends Components.CwEventListItem, HTMLStencilElement {
    }
    var HTMLCwEventListItemElement: {
        prototype: HTMLCwEventListItemElement;
        new (): HTMLCwEventListItemElement;
    };
    interface HTMLCwExpandingSearchElement extends Components.CwExpandingSearch, HTMLStencilElement {
    }
    var HTMLCwExpandingSearchElement: {
        prototype: HTMLCwExpandingSearchElement;
        new (): HTMLCwExpandingSearchElement;
    };
    interface HTMLCwFilterChipElement extends Components.CwFilterChip, HTMLStencilElement {
    }
    var HTMLCwFilterChipElement: {
        prototype: HTMLCwFilterChipElement;
        new (): HTMLCwFilterChipElement;
    };
    interface HTMLCwFlipTileElement extends Components.CwFlipTile, HTMLStencilElement {
    }
    var HTMLCwFlipTileElement: {
        prototype: HTMLCwFlipTileElement;
        new (): HTMLCwFlipTileElement;
    };
    interface HTMLCwFlipTileContentElement extends Components.CwFlipTileContent, HTMLStencilElement {
    }
    var HTMLCwFlipTileContentElement: {
        prototype: HTMLCwFlipTileContentElement;
        new (): HTMLCwFlipTileContentElement;
    };
    interface HTMLCwGroupElement extends Components.CwGroup, HTMLStencilElement {
    }
    var HTMLCwGroupElement: {
        prototype: HTMLCwGroupElement;
        new (): HTMLCwGroupElement;
    };
    interface HTMLCwGroupDropdownItemElement extends Components.CwGroupDropdownItem, HTMLStencilElement {
    }
    var HTMLCwGroupDropdownItemElement: {
        prototype: HTMLCwGroupDropdownItemElement;
        new (): HTMLCwGroupDropdownItemElement;
    };
    interface HTMLCwGroupItemElement extends Components.CwGroupItem, HTMLStencilElement {
    }
    var HTMLCwGroupItemElement: {
        prototype: HTMLCwGroupItemElement;
        new (): HTMLCwGroupItemElement;
    };
    interface HTMLCwIconElement extends Components.CwIcon, HTMLStencilElement {
    }
    var HTMLCwIconElement: {
        prototype: HTMLCwIconElement;
        new (): HTMLCwIconElement;
    };
    interface HTMLCwIconButtonElement extends Components.CwIconButton, HTMLStencilElement {
    }
    var HTMLCwIconButtonElement: {
        prototype: HTMLCwIconButtonElement;
        new (): HTMLCwIconButtonElement;
    };
    interface HTMLCwInputGroupElement extends Components.CwInputGroup, HTMLStencilElement {
    }
    var HTMLCwInputGroupElement: {
        prototype: HTMLCwInputGroupElement;
        new (): HTMLCwInputGroupElement;
    };
    interface HTMLCwMapNavigationElement extends Components.CwMapNavigation, HTMLStencilElement {
    }
    var HTMLCwMapNavigationElement: {
        prototype: HTMLCwMapNavigationElement;
        new (): HTMLCwMapNavigationElement;
    };
    interface HTMLCwMapNavigationOverlayElement extends Components.CwMapNavigationOverlay, HTMLStencilElement {
    }
    var HTMLCwMapNavigationOverlayElement: {
        prototype: HTMLCwMapNavigationOverlayElement;
        new (): HTMLCwMapNavigationOverlayElement;
    };
    interface HTMLCwMenuElement extends Components.CwMenu, HTMLStencilElement {
    }
    var HTMLCwMenuElement: {
        prototype: HTMLCwMenuElement;
        new (): HTMLCwMenuElement;
    };
    interface HTMLCwMenuAboutElement extends Components.CwMenuAbout, HTMLStencilElement {
    }
    var HTMLCwMenuAboutElement: {
        prototype: HTMLCwMenuAboutElement;
        new (): HTMLCwMenuAboutElement;
    };
    interface HTMLCwMenuAboutItemElement extends Components.CwMenuAboutItem, HTMLStencilElement {
    }
    var HTMLCwMenuAboutItemElement: {
        prototype: HTMLCwMenuAboutItemElement;
        new (): HTMLCwMenuAboutItemElement;
    };
    interface HTMLCwMenuAboutNewsElement extends Components.CwMenuAboutNews, HTMLStencilElement {
    }
    var HTMLCwMenuAboutNewsElement: {
        prototype: HTMLCwMenuAboutNewsElement;
        new (): HTMLCwMenuAboutNewsElement;
    };
    interface HTMLCwMenuAvatarElement extends Components.CwMenuAvatar, HTMLStencilElement {
    }
    var HTMLCwMenuAvatarElement: {
        prototype: HTMLCwMenuAvatarElement;
        new (): HTMLCwMenuAvatarElement;
    };
    interface HTMLCwMenuAvatarItemElement extends Components.CwMenuAvatarItem, HTMLStencilElement {
    }
    var HTMLCwMenuAvatarItemElement: {
        prototype: HTMLCwMenuAvatarItemElement;
        new (): HTMLCwMenuAvatarItemElement;
    };
    interface HTMLCwMenuItemElement extends Components.CwMenuItem, HTMLStencilElement {
    }
    var HTMLCwMenuItemElement: {
        prototype: HTMLCwMenuItemElement;
        new (): HTMLCwMenuItemElement;
    };
    interface HTMLCwMenuSettingsElement extends Components.CwMenuSettings, HTMLStencilElement {
    }
    var HTMLCwMenuSettingsElement: {
        prototype: HTMLCwMenuSettingsElement;
        new (): HTMLCwMenuSettingsElement;
    };
    interface HTMLCwMenuSettingsItemElement extends Components.CwMenuSettingsItem, HTMLStencilElement {
    }
    var HTMLCwMenuSettingsItemElement: {
        prototype: HTMLCwMenuSettingsItemElement;
        new (): HTMLCwMenuSettingsItemElement;
    };
    interface HTMLCwMessageBarElement extends Components.CwMessageBar, HTMLStencilElement {
    }
    var HTMLCwMessageBarElement: {
        prototype: HTMLCwMessageBarElement;
        new (): HTMLCwMessageBarElement;
    };
    interface HTMLCwModalElement extends Components.CwModal, HTMLStencilElement {
    }
    var HTMLCwModalElement: {
        prototype: HTMLCwModalElement;
        new (): HTMLCwModalElement;
    };
    interface HTMLCwModalContainerElement extends Components.CwModalContainer, HTMLStencilElement {
    }
    var HTMLCwModalContainerElement: {
        prototype: HTMLCwModalContainerElement;
        new (): HTMLCwModalContainerElement;
    };
    interface HTMLCwModalExampleElement extends Components.CwModalExample, HTMLStencilElement {
    }
    var HTMLCwModalExampleElement: {
        prototype: HTMLCwModalExampleElement;
        new (): HTMLCwModalExampleElement;
    };
    interface HTMLCwPillElement extends Components.CwPill, HTMLStencilElement {
    }
    var HTMLCwPillElement: {
        prototype: HTMLCwPillElement;
        new (): HTMLCwPillElement;
    };
    interface HTMLCwSelectElement extends Components.CwSelect, HTMLStencilElement {
    }
    var HTMLCwSelectElement: {
        prototype: HTMLCwSelectElement;
        new (): HTMLCwSelectElement;
    };
    interface HTMLCwSelectItemElement extends Components.CwSelectItem, HTMLStencilElement {
    }
    var HTMLCwSelectItemElement: {
        prototype: HTMLCwSelectItemElement;
        new (): HTMLCwSelectItemElement;
    };
    interface HTMLCwSpinnerElement extends Components.CwSpinner, HTMLStencilElement {
    }
    var HTMLCwSpinnerElement: {
        prototype: HTMLCwSpinnerElement;
        new (): HTMLCwSpinnerElement;
    };
    interface HTMLCwSplitButtonElement extends Components.CwSplitButton, HTMLStencilElement {
    }
    var HTMLCwSplitButtonElement: {
        prototype: HTMLCwSplitButtonElement;
        new (): HTMLCwSplitButtonElement;
    };
    interface HTMLCwSplitButtonItemElement extends Components.CwSplitButtonItem, HTMLStencilElement {
    }
    var HTMLCwSplitButtonItemElement: {
        prototype: HTMLCwSplitButtonItemElement;
        new (): HTMLCwSplitButtonItemElement;
    };
    interface HTMLCwTabItemElement extends Components.CwTabItem, HTMLStencilElement {
    }
    var HTMLCwTabItemElement: {
        prototype: HTMLCwTabItemElement;
        new (): HTMLCwTabItemElement;
    };
    interface HTMLCwTabsElement extends Components.CwTabs, HTMLStencilElement {
    }
    var HTMLCwTabsElement: {
        prototype: HTMLCwTabsElement;
        new (): HTMLCwTabsElement;
    };
    interface HTMLCwTileElement extends Components.CwTile, HTMLStencilElement {
    }
    var HTMLCwTileElement: {
        prototype: HTMLCwTileElement;
        new (): HTMLCwTileElement;
    };
    interface HTMLCwToastElement extends Components.CwToast, HTMLStencilElement {
    }
    var HTMLCwToastElement: {
        prototype: HTMLCwToastElement;
        new (): HTMLCwToastElement;
    };
    interface HTMLCwToastContainerElement extends Components.CwToastContainer, HTMLStencilElement {
    }
    var HTMLCwToastContainerElement: {
        prototype: HTMLCwToastContainerElement;
        new (): HTMLCwToastContainerElement;
    };
    interface HTMLCwToggleElement extends Components.CwToggle, HTMLStencilElement {
    }
    var HTMLCwToggleElement: {
        prototype: HTMLCwToggleElement;
        new (): HTMLCwToggleElement;
    };
    interface HTMLCwTreeElement extends Components.CwTree, HTMLStencilElement {
    }
    var HTMLCwTreeElement: {
        prototype: HTMLCwTreeElement;
        new (): HTMLCwTreeElement;
    };
    interface HTMLCwTreeItemElement extends Components.CwTreeItem, HTMLStencilElement {
    }
    var HTMLCwTreeItemElement: {
        prototype: HTMLCwTreeItemElement;
        new (): HTMLCwTreeItemElement;
    };
    interface HTMLCwUploadElement extends Components.CwUpload, HTMLStencilElement {
    }
    var HTMLCwUploadElement: {
        prototype: HTMLCwUploadElement;
        new (): HTMLCwUploadElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "cw-animated-tab": HTMLCwAnimatedTabElement;
        "cw-animated-tabs": HTMLCwAnimatedTabsElement;
        "cw-application-header": HTMLCwApplicationHeaderElement;
        "cw-basic-navigation": HTMLCwBasicNavigationElement;
        "cw-blind": HTMLCwBlindElement;
        "cw-breadcrumb": HTMLCwBreadcrumbElement;
        "cw-breadcrumb-item": HTMLCwBreadcrumbItemElement;
        "cw-button": HTMLCwButtonElement;
        "cw-category-filter": HTMLCwCategoryFilterElement;
        "cw-chip": HTMLCwChipElement;
        "cw-counter-pill": HTMLCwCounterPillElement;
        "cw-drawer": HTMLCwDrawerElement;
        "cw-dropdown": HTMLCwDropdownElement;
        "cw-dropdown-item": HTMLCwDropdownItemElement;
        "cw-event-list": HTMLCwEventListElement;
        "cw-event-list-item": HTMLCwEventListItemElement;
        "cw-expanding-search": HTMLCwExpandingSearchElement;
        "cw-filter-chip": HTMLCwFilterChipElement;
        "cw-flip-tile": HTMLCwFlipTileElement;
        "cw-flip-tile-content": HTMLCwFlipTileContentElement;
        "cw-group": HTMLCwGroupElement;
        "cw-group-dropdown-item": HTMLCwGroupDropdownItemElement;
        "cw-group-item": HTMLCwGroupItemElement;
        "cw-icon": HTMLCwIconElement;
        "cw-icon-button": HTMLCwIconButtonElement;
        "cw-input-group": HTMLCwInputGroupElement;
        "cw-map-navigation": HTMLCwMapNavigationElement;
        "cw-map-navigation-overlay": HTMLCwMapNavigationOverlayElement;
        "cw-menu": HTMLCwMenuElement;
        "cw-menu-about": HTMLCwMenuAboutElement;
        "cw-menu-about-item": HTMLCwMenuAboutItemElement;
        "cw-menu-about-news": HTMLCwMenuAboutNewsElement;
        "cw-menu-avatar": HTMLCwMenuAvatarElement;
        "cw-menu-avatar-item": HTMLCwMenuAvatarItemElement;
        "cw-menu-item": HTMLCwMenuItemElement;
        "cw-menu-settings": HTMLCwMenuSettingsElement;
        "cw-menu-settings-item": HTMLCwMenuSettingsItemElement;
        "cw-message-bar": HTMLCwMessageBarElement;
        "cw-modal": HTMLCwModalElement;
        "cw-modal-container": HTMLCwModalContainerElement;
        "cw-modal-example": HTMLCwModalExampleElement;
        "cw-pill": HTMLCwPillElement;
        "cw-select": HTMLCwSelectElement;
        "cw-select-item": HTMLCwSelectItemElement;
        "cw-spinner": HTMLCwSpinnerElement;
        "cw-split-button": HTMLCwSplitButtonElement;
        "cw-split-button-item": HTMLCwSplitButtonItemElement;
        "cw-tab-item": HTMLCwTabItemElement;
        "cw-tabs": HTMLCwTabsElement;
        "cw-tile": HTMLCwTileElement;
        "cw-toast": HTMLCwToastElement;
        "cw-toast-container": HTMLCwToastContainerElement;
        "cw-toggle": HTMLCwToggleElement;
        "cw-tree": HTMLCwTreeElement;
        "cw-tree-item": HTMLCwTreeItemElement;
        "cw-upload": HTMLCwUploadElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface CwAnimatedTab {
        /**
          * Show notification number
         */
        "count"?: number;
        /**
          * Icon of the tab
         */
        "icon"?: string;
    }
    interface CwAnimatedTabs {
        /**
          * @deprecated - For debugging purposes only
         */
        "disableAnimations"?: boolean;
        /**
          * Tab navigated
         */
        "onTabClick"?: (event: CwAnimatedTabsCustomEvent<any>) => void;
        /**
          * Current selected tab index
         */
        "selectedIndex"?: number;
        /**
          * Placement of the tabs
         */
        "tabPlacement"?: 'top' | 'bottom';
    }
    interface CwApplicationHeader {
        /**
          * Application name
         */
        "name"?: string;
    }
    interface CwBasicNavigation {
        /**
          * Application name
         */
        "applicationName"?: string;
        /**
          * Hide application header
         */
        "hideHeader"?: boolean;
    }
    interface CwBlind {
        /**
          * Collapsed state
         */
        "collapsed"?: boolean;
        /**
          * Label of blind
         */
        "label"?: string;
        /**
          * Collapsed state changed
         */
        "onCollapsedChange"?: (event: CwBlindCustomEvent<boolean>) => void;
    }
    interface CwBreadcrumb {
        /**
          * Ghost breadcrumbs will not show solid backgrounds on individual crumbs unless there is a mouse event (e.g. hover)
         */
        "ghost"?: boolean;
        /**
          * Items will be accessible through a dropdown
         */
        "nextItems"?: string[];
        /**
          * Crumb item clicked event
         */
        "onItemClick"?: (event: CwBreadcrumbCustomEvent<string>) => void;
        /**
          * Next item clicked event
         */
        "onNextClick"?: (event: CwBreadcrumbCustomEvent<{ event: UIEvent; item: string }>) => void;
        /**
          * Excess items will get hidden inside of dropdown
         */
        "visibleItemCount"?: number;
    }
    interface CwBreadcrumbItem {
        /**
          * Icon to be displayed next ot the label
         */
        "icon"?: string;
        /**
          * Breadcrumb label
         */
        "label"?: string;
    }
    interface CwButton {
        /**
          * Disable the button
         */
        "disabled"?: boolean;
        /**
          * Button with no background or outline
         */
        "ghost"?: boolean;
        /**
          * Invisible button
          * @deprecated use ghost property
         */
        "invisible"?: boolean;
        /**
          * Outline button
         */
        "outline"?: boolean;
        /**
          * Show button as selected. Should be used with outline or invisible
         */
        "selected"?: boolean;
        /**
          * Button varaint
         */
        "variant"?: Buttons;
    }
    interface CwCategoryFilter {
        /**
          * Configuration object hash used to populate the dropwdown menu for typeahead and quick selection functionality. Each ID maps to an object with a label and an array of options to select from.
         */
        "categories"?: {
    [id: string]: {
      label: string;
      options: string[];
    };
  };
        /**
          * A set of search criteria to populate the component with.
         */
        "filterState"?: FilterState;
        /**
          * Allows to hide the icon inside the text input. Defaults to false
         */
        "hideIcon"?: boolean;
        /**
          * i18n
         */
        "i18nPlainText"?: string;
        /**
          * The icon next to the actual text input Defaults to 'search'
         */
        "icon"?: string;
        /**
          * When set this will initially populate the component with the provided search criteria. This will trigger all input events accordingly.
          * @deprecated will get removed with next major release (7.0.0). Use the member filterState instead.
         */
        "initialState"?: FilterState;
        /**
          * i18n
         */
        "labelCategories"?: string;
        /**
          * In certain use cases some categories are not available for selection any more. To allow proper display of set filters with these categories this ID to label mapping can be populated. Configuration object hash used to supply labels to the filter chips in the input field. Each ID maps to a string representing the label to display.
         */
        "nonSelectableCategories"?: {
    [id: string]: string;
  };
        /**
          * Event dispatched whenever the filter state changes.
         */
        "onFilterChanged"?: (event: CwCategoryFilterCustomEvent<FilterState>) => void;
        /**
          * Event dispatched whenever the text input changes.
         */
        "onInputChanged"?: (event: CwCategoryFilterCustomEvent<InputState>) => void;
        /**
          * Placeholder text to be displayed in an empty input field.
         */
        "placeholder"?: string;
        /**
          * If set to true allows that a single category can be set more than once. An already set category will not appear in the category dropdown if set to false.  Defaults to true
         */
        "repeatCategories"?: boolean;
        /**
          * A list of strings that will be supplied as typeahead suggestions not tied to any categories.
         */
        "suggestions"?: string[];
        /**
          * @deprecated For debugging purposes only!
         */
        "tmpDisableScrollIntoView"?: boolean;
    }
    interface CwChip {
        /**
          * Display chip in active state. Only working witht `variant="primary"`
         */
        "active"?: boolean;
        /**
          * Custom color for pill. Only working for `variant='custom'`
         */
        "background"?: string | undefined;
        /**
          * Show close icon
         */
        "closable"?: boolean;
        /**
          * Custom font color for pill. Only working for `variant='custom'`
         */
        "color"?: string | undefined;
        /**
          * Show icon
         */
        "icon"?: string | undefined;
        /**
          * Fire event if close button is clicked
         */
        "onClose"?: (event: CwChipCustomEvent<any>) => void;
        /**
          * Show chip with outline style
         */
        "outline"?: boolean;
        /**
          * Chip variant
         */
        "variant"?: 'primary' | 'alarm' | 'critical' | 'warning' | 'info' | 'neutral' | 'success' | 'custom';
    }
    interface CwCounterPill {
        /**
          * Align pill content left
         */
        "alignLeft"?: boolean;
        /**
          * Custom color for pill. Only working for `variant='custom'`
         */
        "background"?: string | undefined;
        /**
          * Custom font color for pill. Only working for `variant='custom'`
         */
        "color"?: string | undefined;
        /**
          * Show pill as outline
         */
        "outline"?: boolean;
        /**
          * Pill variant
         */
        "variant"?: 'primary' | 'alarm' | 'critical' | 'warning' | 'info' | 'neutral' | 'success' | 'custom';
    }
    interface CwDrawer {
        /**
          * Fired in case of an outside click during drawer showed state
         */
        "closeOnClickOutside"?: boolean;
        /**
          * Render the drawer with maximum height
         */
        "fullHeight"?: boolean;
        /**
          * Max width interpreted as REM
         */
        "maxWidth"?: number;
        /**
          * Min width interpreted as REM
         */
        "minWidth"?: number;
        /**
          * Fire event after drawer is close
         */
        "onClose"?: (event: CwDrawerCustomEvent<any>) => void;
        /**
          * Fire event after drawer is open
         */
        "onOpen"?: (event: CwDrawerCustomEvent<any>) => void;
        /**
          * Show or hide the drawer
         */
        "show"?: boolean;
        /**
          * Width interpreted as REM if not set to 'auto'
         */
        "width"?: number | 'auto';
    }
    interface CwDropdown {
        /**
          * Adjust dropdown width to the parent width
         */
        "adjustDropdownWidthToReferenceWidth"?: boolean;
        /**
          * Adjust dropdown width to the parent width
          * @deprecated - property has a typo and will get removed in the next major version. Use `adjustDropdownWidthToReferenceWidth` instead.
         */
        "adjustDropdownWidthToReferenceWith"?: boolean;
        /**
          * Define an anchor element
         */
        "anchor"?: string | HTMLElement;
        /**
          * Close behavior
         */
        "closeBehavior"?: 'inside' | 'outside' | 'both' | boolean;
        /**
          * An optional header shown at the top of the dropdown
         */
        "header"?: string;
        /**
          * Fire event after visibility of dropdown has changed
         */
        "onShowChanged"?: (event: CwDropdownCustomEvent<boolean>) => void;
        /**
          * Placement of the dropdown
         */
        "placement"?: Placement;
        /**
          * Position strategy
         */
        "positioningStrategy"?: PositioningStrategy;
        /**
          * Show dropdown
         */
        "show"?: boolean;
        /**
          * Define an element that triggers the dropdown. A trigger can either be a string that will be interprated as id attribute or a DOM element.
         */
        "trigger"?: string | HTMLElement;
    }
    interface CwDropdownItem {
        /**
          * Whether the item is checked or not. If true a checkmark will mark the item as checked.
         */
        "checked"?: boolean;
        /**
          * Disable item and remove event listeners
         */
        "disabled"?: boolean;
        /**
          * Display hover state
         */
        "hover"?: boolean;
        /**
          * Icon of dropdown item
         */
        "icon"?: string;
        /**
          * Label of dropdown item
         */
        "label"?: string;
        /**
          * Click on item
         */
        "onItemClick"?: (event: CwDropdownItemCustomEvent<HTMLCwDropdownItemElement>) => void;
    }
    interface CwEventList {
        /**
          * Animate state change transitions. Defaults to 'true'.
         */
        "animated"?: boolean;
        /**
          * Display a chevron icon in list items. Defaults to 'false'
         */
        "chevron"?: boolean;
        /**
          * Make event-list items more compact
         */
        "compact"?: boolean;
        /**
          * Determines the height of list items. This can either be one of two predefined sizes ('S' or 'L') or an absolute pixel value. In case a number is supplied it will get converted to rem internally. Defaults to 'S'.
         */
        "itemHeight"?: 'S' | 'L' | number;
    }
    interface CwEventListItem {
        /**
          * Show chevron on right side of the event list item
         */
        "chevron"?: boolean;
        /**
          * Color of the status indicator. Allowed values are all Core UI color names.
         */
        "color"?: string;
        /**
          * Disable event list item
         */
        "disabled"?: boolean;
        /**
          * Event list item click
         */
        "onItemClick"?: (event: CwEventListItemCustomEvent<any>) => void;
        /**
          * Opacity of the status indicator. Defaults to 1.0
          * @deprecated Will be removed in 7.0.0. Use color with alpha value.
         */
        "opacity"?: number;
        /**
          * Show event list item as selected
         */
        "selected"?: boolean;
    }
    interface CwExpandingSearch {
        /**
          * Search icon
         */
        "icon"?: string;
        /**
          * Value changed
         */
        "onValueChange"?: (event: CwExpandingSearchCustomEvent<string>) => void;
        /**
          * Placeholder text
         */
        "placeholder"?: string;
        /**
          * Default value
         */
        "value"?: string;
    }
    interface CwFilterChip {
        /**
          * If true the filter chip will be in disabled state
         */
        "disabled"?: boolean;
        /**
          * Close clicked
         */
        "onCloseClick"?: (event: CwFilterChipCustomEvent<void>) => void;
    }
    interface CwFlipTile {
        /**
          * Tmp property name
         */
        "footer"?: string;
        /**
          * Variation of the Flip
         */
        "state"?: FlipTileState;
    }
    interface CwFlipTileContent {
    }
    interface CwGroup {
        /**
          * Whether the group is collapsed or expanded. Defaults to true.
         */
        "collapsed"?: boolean;
        /**
          * Expand the group if the header is clicked
         */
        "expandOnHeaderClick"?: boolean;
        /**
          * Group header
         */
        "header"?: string;
        /**
          * The index of the selected group entry. If undefined no group item is selected.
         */
        "index"?: number;
        /**
          * Group collapsed
         */
        "onCollapsedChanged"?: (event: CwGroupCustomEvent<boolean>) => void;
        /**
          * Emits when whole group gets selected.
         */
        "onSelectGroup"?: (event: CwGroupCustomEvent<boolean>) => void;
        /**
          * Emits when group item gets selected.
         */
        "onSelectItem"?: (event: CwGroupCustomEvent<number>) => void;
        /**
          * Whether the group is selected.
         */
        "selected"?: boolean;
        /**
          * Group header subtitle
         */
        "subHeader"?: string;
        /**
          * Suppress
         */
        "suppressHeaderSelection"?: boolean;
    }
    interface CwGroupDropdownItem {
        /**
          * Group dropdown icon
         */
        "icon"?: string;
        /**
          * Group dropdown label
         */
        "label"?: string;
    }
    interface CwGroupItem {
        /**
          * Group item icon
         */
        "icon"?: string;
        /**
          * Index
         */
        "index"?: number;
        /**
          * Selection changed
         */
        "onSelectedChanged"?: (event: CwGroupItemCustomEvent<HTMLCwGroupItemElement>) => void;
        /**
          * Group item secondary text
         */
        "secondaryText"?: string;
        /**
          * Show selected state
         */
        "selected"?: boolean;
        /**
          * Supress the selection of the group
         */
        "suppressSelection"?: boolean;
        /**
          * Group item text
         */
        "text"?: string;
    }
    interface CwIcon {
        /**
          * Color of the icon
         */
        "color"?: string;
        /**
          * Use one of our defined icon names e.g `copy`.
         */
        "name"?: string;
        /**
          * Size of the icon
         */
        "size"?: '16' | '24' | '32';
    }
    interface CwIconButton {
        /**
          * Color of icon in  button
         */
        "color"?: string;
        /**
          * Disabled
         */
        "disabled"?: boolean;
        /**
          * Button invisible
         */
        "ghost"?: boolean;
        /**
          * Button icon
         */
        "icon"?: string;
        /**
          * Button invisible
          * @deprecated use ghost property
         */
        "invisible"?: boolean;
        /**
          * Button outline
         */
        "outline"?: boolean;
        /**
          * Button in oval shape
         */
        "oval"?: boolean;
        /**
          * Selected state only working with outline or invisible
         */
        "selected"?: boolean;
        /**
          * Size of icon in button
         */
        "size"?: '32' | '24' | '16';
        /**
          * Variant of button
         */
        "variant"?: 'Primary' | 'Secondary';
    }
    interface CwInputGroup {
    }
    interface CwMapNavigation {
        /**
          * Application name
         */
        "appName"?: string;
        /**
          * Hide the sidebar context menu button when set to true
         */
        "hideContextMenu"?: boolean;
        /**
          * Navigation title
         */
        "navTitle"?: string;
        /**
          * Context menu clicked
         */
        "onContextMenuClick"?: (event: CwMapNavigationCustomEvent<void>) => void;
        /**
          * Navigation toggled
         */
        "onNavigationToggled"?: (event: CwMapNavigationCustomEvent<boolean>) => void;
    }
    interface CwMapNavigationOverlay {
        /**
          * Color of icon
         */
        "color"?: string;
        /**
          * Icon of overlay
         */
        "icon"?: string;
        /**
          * Title of overlay
         */
        "name"?: string;
        /**
          * Event closed
         */
        "onCloseClick"?: (event: CwMapNavigationOverlayCustomEvent<any>) => void;
    }
    interface CwMenu {
        /**
          * Should only be set if you use cw-menu standalone
         */
        "applicationDescription"?: string;
        /**
          * Should only be set if you use cw-menu standalone
         */
        "applicationName"?: string;
        /**
          * Internal
         */
        "enableMapExpand"?: boolean;
        /**
          * Is settings tab is visible
         */
        "enableSettings"?: boolean;
        /**
          * @deprecated Show toggle theme button
         */
        "enableToggleTheme"?: boolean;
        /**
          * Expand menu
         */
        "expand"?: boolean;
        "i18nCollapse"?: string;
        "i18nExpand"?: string;
        "i18nLegal"?: string;
        "i18nMore"?: string;
        "i18nSettings"?: string;
        "i18nToggleTheme"?: string;
        /**
          * Maximum number of menu items to show in case enough vertical space is available. Extra menu items will be collapsed to 'show more' menu item.
         */
        "maxVisibleMenuItems"?: number;
        /**
          * Menu expanded
         */
        "onExpandChange"?: (event: CwMenuCustomEvent<boolean>) => void;
        /**
          * Map Sidebar expanded
         */
        "onMapExpandChange"?: (event: CwMenuCustomEvent<boolean>) => void;
        /**
          * Is about tab visible
         */
        "showAbout"?: boolean;
        /**
          * Is settings tab visible
         */
        "showSettings"?: boolean;
    }
    interface CwMenuAbout {
        /**
          * Active tab
         */
        "activeTabLabel"?: string;
        /**
          * Should only be set if you use cw-menu standalone
         */
        "applicationDescription"?: string;
        /**
          * Should only be set if you use cw-menu standalone
         */
        "applicationName"?: string;
        /**
          * Copyright
         */
        "copyrightYears"?: string;
        "i18nCookieNoticeLabel"?: string;
        "i18nCorporateLabel"?: string;
        "i18nDigitalId"?: string;
        "i18nImprintLabel"?: string;
        "i18nPrivacyNoticeLabel"?: string;
        "i18nTermsOfUseLabel"?: string;
        /**
          * Language of the links in the About & Legal Tab
         */
        "imprintLanguage"?: LegalLinkLanguage;
        /**
          * Label of first tab
         */
        "label"?: string;
        /**
          * About and Legal closed
         */
        "onClose"?: (event: CwMenuAboutCustomEvent<MouseEvent>) => void;
        /**
          * Internal
         */
        "show"?: boolean;
    }
    interface CwMenuAboutItem {
        /**
          * About Item label
         */
        "label"?: string;
    }
    interface CwMenuAboutNews {
        /**
          * Subtitle of the about news
         */
        "aboutItemLabel"?: string;
        /**
          * Internal
         */
        "expanded"?: boolean;
        "i18nShowMore"?: string;
        /**
          * Title of the about news
         */
        "label"?: string;
        /**
          * Bottom offset
         */
        "offsetBottom"?: number;
        /**
          * Popover closed
         */
        "onClosePopover"?: (event: CwMenuAboutNewsCustomEvent<void>) => void;
        /**
          * Show More button is pressed
         */
        "onShowMore"?: (event: CwMenuAboutNewsCustomEvent<MouseEvent>) => void;
        /**
          * Show about news
         */
        "show"?: boolean;
    }
    interface CwMenuAvatar {
        /**
          * Second line of text
         */
        "bottom"?: string;
        "i18nLogout"?: string;
        /**
          * Logout click
         */
        "onLogoutClick"?: (event: CwMenuAvatarCustomEvent<any>) => void;
        /**
          * First line of text
         */
        "top"?: string;
    }
    interface CwMenuAvatarItem {
        /**
          * Avatar dropdown icon
         */
        "icon"?: string;
        /**
          * Avatar dropdown label
         */
        "label"?: string;
        /**
          * Avatar dropdown item clicked
         */
        "onItemClick"?: (event: CwMenuAvatarItemCustomEvent<MouseEvent>) => void;
    }
    interface CwMenuItem {
        /**
          * State to display active
         */
        "active"?: boolean;
        /**
          * Place tab on bottom
         */
        "bottom"?: boolean;
        /**
          * Disable tab and remove event handlers
         */
        "disabled"?: boolean;
        /**
          * Move the Tab to a top position.
         */
        "home"?: boolean;
        /**
          * Show notification cound on tab
         */
        "notifications"?: number;
        /**
          * Icon name from @siemens/core-ui-icons
         */
        "tabIcon"?: string;
    }
    interface CwMenuSettings {
        /**
          * active tab
         */
        "activeTabLabel"?: string;
        /**
          * Label
         */
        "label"?: string;
        /**
          * Popover closed
         */
        "onClose"?: (event: CwMenuSettingsCustomEvent<MouseEvent>) => void;
        /**
          * Internal
         */
        "show"?: boolean;
    }
    interface CwMenuSettingsItem {
        /**
          * Label
         */
        "label"?: string;
    }
    interface CwMessageBar {
        /**
          * If true, close button is enabled and alert can be dismissed by the user
         */
        "dismissible"?: boolean;
        /**
          * An event emitted when the close button is clicked
         */
        "onClosedChange"?: (event: CwMessageBarCustomEvent<any>) => void;
        /**
          * Specifies the type of the alert.
         */
        "type"?: 'danger' | 'warning' | 'info';
    }
    interface CwModal {
        /**
          * Should the modal be animtated
         */
        "animation"?: boolean;
        "ariaDescribedBy"?: string;
        "ariaLabelledBy"?: string;
        /**
          * Adds a dimming layer to the modal. This should only be used when it it necessary to focus the user's attention to the dialog content (e.g. errors, warnings, complex tasks).
         */
        "backdrop"?: boolean | 'static';
        /**
          * Backdrop class
         */
        "backdropClass"?: string;
        /**
          * BeforeDismiss callbacl
         */
        "beforeDismiss"?: () => boolean | Promise<boolean>;
        /**
          * Centered modal
         */
        "centered"?: boolean;
        /**
          * Content of modal
         */
        "content"?: HTMLElement | string;
        /**
          * Header title
         */
        "headerTitle"?: string;
        /**
          * ESC close modal dialog
         */
        "keyboard"?: boolean;
        /**
          * Modal dialog class
         */
        "modalDialogClass"?: string;
        /**
          * Modal closed
         */
        "onClosed"?: (event: CwModalCustomEvent<any>) => void;
        /**
          * Modal dismissed
         */
        "onDismissed"?: (event: CwModalCustomEvent<any>) => void;
        /**
          * Modal scollable
         */
        "scrollable"?: boolean;
        /**
          * Modal size
         */
        "size"?: 'sm' | 'lg' | 'xl';
        /**
          * Window class
         */
        "windowClass"?: string;
    }
    interface CwModalContainer {
    }
    interface CwModalExample {
        /**
          * Emit close modal
         */
        "onClose"?: (event: CwModalExampleCustomEvent<any>) => void;
    }
    interface CwPill {
        /**
          * Align pill content left
         */
        "alignLeft"?: boolean;
        /**
          * Custom color for pill. Only working for `variant='custom'`
         */
        "background"?: string | undefined;
        /**
          * Custom font color for pill. Only working for `variant='custom'`
         */
        "color"?: string | undefined;
        /**
          * Show icon
         */
        "icon"?: string | undefined;
        /**
          * Show pill as outline
         */
        "outline"?: boolean;
        /**
          * Pill variant
         */
        "variant"?: 'primary' | 'alarm' | 'critical' | 'warning' | 'info' | 'neutral' | 'success' | 'custom';
    }
    interface CwSelect {
        /**
          * Show clear button
         */
        "allowClear"?: boolean;
        /**
          * If true the select will be in disabled state
         */
        "disabled"?: boolean;
        /**
          * Select is extendable
         */
        "editable"?: boolean;
        /**
          * Input field placeholder
         */
        "i18nPlaceholder"?: string;
        /**
          * Input field placeholder for editable select
         */
        "i18nPlaceholderEditable"?: string;
        /**
          * Select list header
         */
        "i18nSelectListHeader"?: string;
        /**
          * Selection mode
         */
        "mode"?: 'single' | 'multiple';
        /**
          * Item added to selection
         */
        "onAddItem"?: (event: CwSelectCustomEvent<string>) => void;
        /**
          * Item selection changed
         */
        "onItemSelectionChange"?: (event: CwSelectCustomEvent<string | string[]>) => void;
        /**
          * If true the select will be in readonly mode
         */
        "readonly"?: boolean;
        /**
          * Indices of selected items
         */
        "selectedIndices"?: string | string[];
    }
    interface CwSelectItem {
        /**
          * ***Internal***
         */
        "hover"?: boolean;
        /**
          * Displayed name of the item
         */
        "label"?: string;
        /**
          * Item clicked
         */
        "onItemClick"?: (event: CwSelectItemCustomEvent<string>) => void;
        /**
          * Whether the item is selected.
         */
        "selected"?: boolean;
        /**
          * Item value
         */
        "value": any;
    }
    interface CwSpinner {
        /**
          * Size of spinner
         */
        "size"?: 'medium' | 'large';
        /**
          * Variant of spinner
         */
        "variant"?: 'primary' | 'sencodary' | 'secondary';
    }
    interface CwSplitButton {
        /**
          * Disabled
         */
        "disabled"?: boolean;
        /**
          * Button invisible
         */
        "ghost"?: boolean;
        /**
          * Button icon
         */
        "icon"?: string;
        /**
          * Button invisible
          * @deprecated use ghost property
         */
        "invisible"?: boolean;
        /**
          * Button label
         */
        "label"?: string;
        /**
          * Button clicked
         */
        "onButtonClick"?: (event: CwSplitButtonCustomEvent<MouseEvent>) => void;
        /**
          * Button outline variant
         */
        "outline"?: boolean;
        /**
          * Placement of the dropdown
         */
        "placement"?: Placement;
        /**
          * Splitbutton icon
         */
        "splitIcon"?: string;
        /**
          * Color variant of button
         */
        "variant"?: Buttons;
    }
    interface CwSplitButtonItem {
        /**
          * Dropdown icon
         */
        "icon"?: string;
        /**
          * Dropdown label
         */
        "label"?: string;
        /**
          * Dropdown item clicked
         */
        "onItemClick"?: (event: CwSplitButtonItemCustomEvent<MouseEvent>) => void;
    }
    interface CwTabItem {
        /**
          * Set disabled tab
         */
        "disabled"?: boolean;
        /**
          * Set icon only tab
         */
        "icon"?: boolean;
        /**
          * Set layout width style
         */
        "layout"?: 'auto' | 'stretched';
        /**
          * Set selected placement
         */
        "placement"?: 'bottom' | 'top';
        /**
          * Set selected tab
         */
        "selected"?: boolean;
        /**
          * Set small size tab
         */
        "small"?: boolean;
    }
    interface CwTabs {
        /**
          * Set layout width style
         */
        "layout"?: 'auto' | 'stretched';
        /**
          * Set placement style
         */
        "placement"?: 'bottom' | 'top';
        /**
          * Set default selected tab by index
         */
        "selected"?: number;
        /**
          * Set tab items to small size
         */
        "small"?: boolean;
    }
    interface CwTile {
        /**
          * Size of the tile - one of 'small', 'medium' or 'large'
         */
        "size"?: 'small' | 'medium' | 'big';
    }
    interface CwToast {
        /**
          * Autoclose behavior
         */
        "autoClose"?: boolean;
        /**
          * Autoclose title after delay
         */
        "autoCloseDelay"?: number;
        /**
          * Icon of toast
         */
        "icon"?: string;
        /**
          * Icon color of toast
         */
        "iconColor"?: string;
        /**
          * Toast closed
         */
        "onCloseToast"?: (event: CwToastCustomEvent<any>) => void;
        /**
          * Toast title
         */
        "toastTitle"?: string;
        /**
          * Toast type
         */
        "type"?: ToastType;
    }
    interface CwToastContainer {
        "containerClass"?: string;
        "containerId"?: string;
        "position"?: string;
    }
    interface CwToggle {
        /**
          * Whether the slide-toggle element is checked or not.
         */
        "checked"?: boolean;
        /**
          * Basic and status colors from color palette
         */
        "color"?: string;
        /**
          * Whether the slide-toggle element is disabled or not.
         */
        "disabled"?: boolean;
        /**
          * Hide `on` and `off` text
         */
        "hideText"?: boolean;
        /**
          * An event will be dispatched each time the slide-toggle changes its value.
         */
        "onCheckedChange"?: (event: CwToggleCustomEvent<boolean>) => void;
        /**
          * Test for toggle off
         */
        "textOff"?: string;
        /**
          * Text for toggle on
         */
        "textOn"?: string;
    }
    interface CwTree {
        /**
          * Selection and collapsed state management
         */
        "context"?: TreeContext;
        /**
          * Tree modal
         */
        "model"?: TreeModel<any>;
        /**
          * Context changed
         */
        "onContextChange"?: (event: CwTreeCustomEvent<TreeContext>) => void;
        /**
          * Render function of tree items
         */
        "renderItem"?: (index: number, data: any, dataList: Array<any>, context: TreeContext, update: (callback: UpdateCallback) => void) => HTMLElement;
        /**
          * Initial root element will not be rendered
         */
        "root"?: string;
    }
    interface CwTreeItem {
        /**
          * Context
         */
        "context"?: TreeItemContext;
        /**
          * Has tree item children
         */
        "hasChildren"?: boolean;
        /**
          * Clicked
         */
        "onItemClick"?: (event: CwTreeItemCustomEvent<void>) => void;
        /**
          * Expand/Collapsed toggled
         */
        "onToggle"?: (event: CwTreeItemCustomEvent<void>) => void;
        /**
          * Text
         */
        "text"?: string;
    }
    interface CwUpload {
        /**
          * The accept attribute specifies the types of files that the server accepts (that can be submitted through a file upload). [accept]{@link https ://www.w3schools.com/tags/att_input_accept.asp}
         */
        "accept"?: string;
        /**
          * Disable all input events
         */
        "disabled"?: boolean;
        /**
          * Label for upload file button
         */
        "i18nUploadFile"?: string;
        /**
          * Will be used by state = UploadFileState.LOADING
         */
        "loadingText"?: string;
        /**
          * If multiple is true the user can drop or select multiple files
         */
        "multiple"?: boolean;
        /**
          * You get an array of Files after drop-action or browse action is finished
         */
        "onFilesChanged"?: (event: CwUploadCustomEvent<Array<File>>) => void;
        /**
          * Will be used by state = UploadFileState.SELECT_FILE
         */
        "selectFileText"?: string;
        /**
          * After a file is uploaded you can set the upload component to a defined state
         */
        "state"?: UploadFileState;
        /**
          * Will be used by state = UploadFileState.UPLOAD_FAILED
         */
        "uploadFailedText"?: string;
        /**
          * Will be used by state = UploadFileState.UPLOAD_SUCCESSED
         */
        "uploadSuccessText"?: string;
    }
    interface MyComponent {
    }
    interface IntrinsicElements {
        "cw-animated-tab": CwAnimatedTab;
        "cw-animated-tabs": CwAnimatedTabs;
        "cw-application-header": CwApplicationHeader;
        "cw-basic-navigation": CwBasicNavigation;
        "cw-blind": CwBlind;
        "cw-breadcrumb": CwBreadcrumb;
        "cw-breadcrumb-item": CwBreadcrumbItem;
        "cw-button": CwButton;
        "cw-category-filter": CwCategoryFilter;
        "cw-chip": CwChip;
        "cw-counter-pill": CwCounterPill;
        "cw-drawer": CwDrawer;
        "cw-dropdown": CwDropdown;
        "cw-dropdown-item": CwDropdownItem;
        "cw-event-list": CwEventList;
        "cw-event-list-item": CwEventListItem;
        "cw-expanding-search": CwExpandingSearch;
        "cw-filter-chip": CwFilterChip;
        "cw-flip-tile": CwFlipTile;
        "cw-flip-tile-content": CwFlipTileContent;
        "cw-group": CwGroup;
        "cw-group-dropdown-item": CwGroupDropdownItem;
        "cw-group-item": CwGroupItem;
        "cw-icon": CwIcon;
        "cw-icon-button": CwIconButton;
        "cw-input-group": CwInputGroup;
        "cw-map-navigation": CwMapNavigation;
        "cw-map-navigation-overlay": CwMapNavigationOverlay;
        "cw-menu": CwMenu;
        "cw-menu-about": CwMenuAbout;
        "cw-menu-about-item": CwMenuAboutItem;
        "cw-menu-about-news": CwMenuAboutNews;
        "cw-menu-avatar": CwMenuAvatar;
        "cw-menu-avatar-item": CwMenuAvatarItem;
        "cw-menu-item": CwMenuItem;
        "cw-menu-settings": CwMenuSettings;
        "cw-menu-settings-item": CwMenuSettingsItem;
        "cw-message-bar": CwMessageBar;
        "cw-modal": CwModal;
        "cw-modal-container": CwModalContainer;
        "cw-modal-example": CwModalExample;
        "cw-pill": CwPill;
        "cw-select": CwSelect;
        "cw-select-item": CwSelectItem;
        "cw-spinner": CwSpinner;
        "cw-split-button": CwSplitButton;
        "cw-split-button-item": CwSplitButtonItem;
        "cw-tab-item": CwTabItem;
        "cw-tabs": CwTabs;
        "cw-tile": CwTile;
        "cw-toast": CwToast;
        "cw-toast-container": CwToastContainer;
        "cw-toggle": CwToggle;
        "cw-tree": CwTree;
        "cw-tree-item": CwTreeItem;
        "cw-upload": CwUpload;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "cw-animated-tab": LocalJSX.CwAnimatedTab & JSXBase.HTMLAttributes<HTMLCwAnimatedTabElement>;
            "cw-animated-tabs": LocalJSX.CwAnimatedTabs & JSXBase.HTMLAttributes<HTMLCwAnimatedTabsElement>;
            "cw-application-header": LocalJSX.CwApplicationHeader & JSXBase.HTMLAttributes<HTMLCwApplicationHeaderElement>;
            "cw-basic-navigation": LocalJSX.CwBasicNavigation & JSXBase.HTMLAttributes<HTMLCwBasicNavigationElement>;
            "cw-blind": LocalJSX.CwBlind & JSXBase.HTMLAttributes<HTMLCwBlindElement>;
            "cw-breadcrumb": LocalJSX.CwBreadcrumb & JSXBase.HTMLAttributes<HTMLCwBreadcrumbElement>;
            "cw-breadcrumb-item": LocalJSX.CwBreadcrumbItem & JSXBase.HTMLAttributes<HTMLCwBreadcrumbItemElement>;
            "cw-button": LocalJSX.CwButton & JSXBase.HTMLAttributes<HTMLCwButtonElement>;
            "cw-category-filter": LocalJSX.CwCategoryFilter & JSXBase.HTMLAttributes<HTMLCwCategoryFilterElement>;
            "cw-chip": LocalJSX.CwChip & JSXBase.HTMLAttributes<HTMLCwChipElement>;
            "cw-counter-pill": LocalJSX.CwCounterPill & JSXBase.HTMLAttributes<HTMLCwCounterPillElement>;
            "cw-drawer": LocalJSX.CwDrawer & JSXBase.HTMLAttributes<HTMLCwDrawerElement>;
            "cw-dropdown": LocalJSX.CwDropdown & JSXBase.HTMLAttributes<HTMLCwDropdownElement>;
            "cw-dropdown-item": LocalJSX.CwDropdownItem & JSXBase.HTMLAttributes<HTMLCwDropdownItemElement>;
            "cw-event-list": LocalJSX.CwEventList & JSXBase.HTMLAttributes<HTMLCwEventListElement>;
            "cw-event-list-item": LocalJSX.CwEventListItem & JSXBase.HTMLAttributes<HTMLCwEventListItemElement>;
            "cw-expanding-search": LocalJSX.CwExpandingSearch & JSXBase.HTMLAttributes<HTMLCwExpandingSearchElement>;
            "cw-filter-chip": LocalJSX.CwFilterChip & JSXBase.HTMLAttributes<HTMLCwFilterChipElement>;
            "cw-flip-tile": LocalJSX.CwFlipTile & JSXBase.HTMLAttributes<HTMLCwFlipTileElement>;
            "cw-flip-tile-content": LocalJSX.CwFlipTileContent & JSXBase.HTMLAttributes<HTMLCwFlipTileContentElement>;
            "cw-group": LocalJSX.CwGroup & JSXBase.HTMLAttributes<HTMLCwGroupElement>;
            "cw-group-dropdown-item": LocalJSX.CwGroupDropdownItem & JSXBase.HTMLAttributes<HTMLCwGroupDropdownItemElement>;
            "cw-group-item": LocalJSX.CwGroupItem & JSXBase.HTMLAttributes<HTMLCwGroupItemElement>;
            "cw-icon": LocalJSX.CwIcon & JSXBase.HTMLAttributes<HTMLCwIconElement>;
            "cw-icon-button": LocalJSX.CwIconButton & JSXBase.HTMLAttributes<HTMLCwIconButtonElement>;
            "cw-input-group": LocalJSX.CwInputGroup & JSXBase.HTMLAttributes<HTMLCwInputGroupElement>;
            "cw-map-navigation": LocalJSX.CwMapNavigation & JSXBase.HTMLAttributes<HTMLCwMapNavigationElement>;
            "cw-map-navigation-overlay": LocalJSX.CwMapNavigationOverlay & JSXBase.HTMLAttributes<HTMLCwMapNavigationOverlayElement>;
            "cw-menu": LocalJSX.CwMenu & JSXBase.HTMLAttributes<HTMLCwMenuElement>;
            "cw-menu-about": LocalJSX.CwMenuAbout & JSXBase.HTMLAttributes<HTMLCwMenuAboutElement>;
            "cw-menu-about-item": LocalJSX.CwMenuAboutItem & JSXBase.HTMLAttributes<HTMLCwMenuAboutItemElement>;
            "cw-menu-about-news": LocalJSX.CwMenuAboutNews & JSXBase.HTMLAttributes<HTMLCwMenuAboutNewsElement>;
            "cw-menu-avatar": LocalJSX.CwMenuAvatar & JSXBase.HTMLAttributes<HTMLCwMenuAvatarElement>;
            "cw-menu-avatar-item": LocalJSX.CwMenuAvatarItem & JSXBase.HTMLAttributes<HTMLCwMenuAvatarItemElement>;
            "cw-menu-item": LocalJSX.CwMenuItem & JSXBase.HTMLAttributes<HTMLCwMenuItemElement>;
            "cw-menu-settings": LocalJSX.CwMenuSettings & JSXBase.HTMLAttributes<HTMLCwMenuSettingsElement>;
            "cw-menu-settings-item": LocalJSX.CwMenuSettingsItem & JSXBase.HTMLAttributes<HTMLCwMenuSettingsItemElement>;
            "cw-message-bar": LocalJSX.CwMessageBar & JSXBase.HTMLAttributes<HTMLCwMessageBarElement>;
            "cw-modal": LocalJSX.CwModal & JSXBase.HTMLAttributes<HTMLCwModalElement>;
            "cw-modal-container": LocalJSX.CwModalContainer & JSXBase.HTMLAttributes<HTMLCwModalContainerElement>;
            "cw-modal-example": LocalJSX.CwModalExample & JSXBase.HTMLAttributes<HTMLCwModalExampleElement>;
            "cw-pill": LocalJSX.CwPill & JSXBase.HTMLAttributes<HTMLCwPillElement>;
            "cw-select": LocalJSX.CwSelect & JSXBase.HTMLAttributes<HTMLCwSelectElement>;
            "cw-select-item": LocalJSX.CwSelectItem & JSXBase.HTMLAttributes<HTMLCwSelectItemElement>;
            "cw-spinner": LocalJSX.CwSpinner & JSXBase.HTMLAttributes<HTMLCwSpinnerElement>;
            "cw-split-button": LocalJSX.CwSplitButton & JSXBase.HTMLAttributes<HTMLCwSplitButtonElement>;
            "cw-split-button-item": LocalJSX.CwSplitButtonItem & JSXBase.HTMLAttributes<HTMLCwSplitButtonItemElement>;
            "cw-tab-item": LocalJSX.CwTabItem & JSXBase.HTMLAttributes<HTMLCwTabItemElement>;
            "cw-tabs": LocalJSX.CwTabs & JSXBase.HTMLAttributes<HTMLCwTabsElement>;
            "cw-tile": LocalJSX.CwTile & JSXBase.HTMLAttributes<HTMLCwTileElement>;
            "cw-toast": LocalJSX.CwToast & JSXBase.HTMLAttributes<HTMLCwToastElement>;
            "cw-toast-container": LocalJSX.CwToastContainer & JSXBase.HTMLAttributes<HTMLCwToastContainerElement>;
            "cw-toggle": LocalJSX.CwToggle & JSXBase.HTMLAttributes<HTMLCwToggleElement>;
            "cw-tree": LocalJSX.CwTree & JSXBase.HTMLAttributes<HTMLCwTreeElement>;
            "cw-tree-item": LocalJSX.CwTreeItem & JSXBase.HTMLAttributes<HTMLCwTreeItemElement>;
            "cw-upload": LocalJSX.CwUpload & JSXBase.HTMLAttributes<HTMLCwUploadElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
