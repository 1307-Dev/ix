/*
 * COPYRIGHT (c) Siemens AG 2018-2022 ALL RIGHTS RESERVED.
 */

import { existsSync, mkdirSync, readFileSync, writeFileSync } from 'fs';
type ThemeVariables = Record<string, string>;
type Themes = Record<string, ThemeVariables>;

const generateTargetPath = './scss/v7/theme';

const alias = {
  bl: 'brand-light',
  bd: 'brand-dark',
  cl: 'classic-light',
  cd: 'classic-dark',
};

if (process.argv.length !== 3) {
  console.error('Error: Call script with a color file');
}

const colorFilePath = process.argv[2];
const colorFile = readFileSync(colorFilePath).toString();

function extractZeplinColorExport(file: string): Themes {
  const themes: Themes = {};

  const colors = file.match(/--\w\w_theme.*/g);
  colors.forEach(rawColor => {
    const color = rawColor.replace(';', '');

    let [alias, name] = color.split('_theme');
    alias = alias.substring(2).trim();
    name = name.substring(1, name.length);

    let [variableName, value] = name.split(':');

    if (variableName[0] === '-') {
      variableName = variableName.substring(1, variableName.length);
    }

    if (!themes[alias]) {
      themes[alias] = {};
    }

    themes[alias][variableName.trim()] = value.trim();
  });
  return themes;
}

const aliasedThemes = extractZeplinColorExport(colorFile);
const themes: Themes = {};

function formatVariableOutputs(themeVariables: ThemeVariables) {
  const s = Object.keys(themeVariables).map(k => {
    return `    ${k}: ${themeVariables[k]},\n`;
  });

  return s.join('');
}

Object.keys(aliasedThemes).forEach(theme => {
  const themeName = alias[theme];
  themes[themeName] = aliasedThemes[theme];

  let data = `
/*
* COPYRIGHT (c) Siemens AG 2018-2022 ALL RIGHTS RESERVED.
*/
/*
* Autogenerated please not edit directly
*/


$${themeName}: (
$replace$
);
`;

  const format = formatVariableOutputs(themes[themeName]);
  const reg = /\$replace\$/g;

  data = data.replace(reg, format);

  if (!existsSync(`${generateTargetPath}/${themeName}`)) {
    mkdirSync(`${generateTargetPath}/${themeName}`, {
      recursive: true,
    });
  }
  writeFileSync(`${generateTargetPath}/${themeName}/_variables.scss`, data);
});
