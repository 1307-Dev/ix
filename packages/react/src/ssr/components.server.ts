/**
 * This file was automatically generated by the Stencil React Output Target.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 * Do __not__ import components from this file as server side rendered components
 * may not hydrate due to missing Stencil runtime. Instead, import these components through the generated 'components.ts'
 * file that re-exports all components with the 'use client' directive.
 */

/* eslint-disable */

import { type BorderlessChangedEvent, type CustomCloseEvent, type CustomLabelChangeEvent, type DateChangeEvent, type DateInputValidityState, type DateRangeChangeEvent, type DateTimeDateChangeEvent, type DateTimeSelectEvent, type ExpandedChangedEvent, type FilterState, type InputState, type IxBreadcrumbCustomEvent, type IxCardListCustomEvent, type IxCategoryFilterCustomEvent, type IxDateDropdownCustomEvent, type IxDateInputCustomEvent, type IxDatePickerCustomEvent, type IxDatetimePickerCustomEvent, type IxGroupItemCustomEvent, type IxInputCustomEvent, type IxMenuAboutCustomEvent, type IxMenuAboutItemCustomEvent, type IxMenuAboutNewsCustomEvent, type IxMenuAvatarItemCustomEvent, type IxMenuSettingsCustomEvent, type IxMenuSettingsItemCustomEvent, type IxModalHeaderCustomEvent, type IxNumberInputCustomEvent, type IxPaneCustomEvent, type IxSplitButtonCustomEvent, type IxTabItemCustomEvent, type IxTextareaCustomEvent, type IxUploadCustomEvent, type TabClickDetail, type VariantChangedEvent } from "@siemens/ix";
import { IxActionCard as IxActionCardElement, defineCustomElement as defineIxActionCard } from "@siemens/ix/components/ix-action-card.js";
import { IxApplicationHeader as IxApplicationHeaderElement, defineCustomElement as defineIxApplicationHeader } from "@siemens/ix/components/ix-application-header.js";
import { IxApplication as IxApplicationElement, defineCustomElement as defineIxApplication } from "@siemens/ix/components/ix-application.js";
import { IxAvatar as IxAvatarElement, defineCustomElement as defineIxAvatar } from "@siemens/ix/components/ix-avatar.js";
import { IxBasicNavigation as IxBasicNavigationElement, defineCustomElement as defineIxBasicNavigation } from "@siemens/ix/components/ix-basic-navigation.js";
import { IxBlind as IxBlindElement, defineCustomElement as defineIxBlind } from "@siemens/ix/components/ix-blind.js";
import { IxBreadcrumbItem as IxBreadcrumbItemElement, defineCustomElement as defineIxBreadcrumbItem } from "@siemens/ix/components/ix-breadcrumb-item.js";
import { IxBreadcrumb as IxBreadcrumbElement, defineCustomElement as defineIxBreadcrumb } from "@siemens/ix/components/ix-breadcrumb.js";
import { IxButton as IxButtonElement, defineCustomElement as defineIxButton } from "@siemens/ix/components/ix-button.js";
import { IxCardAccordion as IxCardAccordionElement, defineCustomElement as defineIxCardAccordion } from "@siemens/ix/components/ix-card-accordion.js";
import { IxCardContent as IxCardContentElement, defineCustomElement as defineIxCardContent } from "@siemens/ix/components/ix-card-content.js";
import { IxCardList as IxCardListElement, defineCustomElement as defineIxCardList } from "@siemens/ix/components/ix-card-list.js";
import { IxCardTitle as IxCardTitleElement, defineCustomElement as defineIxCardTitle } from "@siemens/ix/components/ix-card-title.js";
import { IxCard as IxCardElement, defineCustomElement as defineIxCard } from "@siemens/ix/components/ix-card.js";
import { IxCategoryFilter as IxCategoryFilterElement, defineCustomElement as defineIxCategoryFilter } from "@siemens/ix/components/ix-category-filter.js";
import { IxCheckboxGroup as IxCheckboxGroupElement, defineCustomElement as defineIxCheckboxGroup } from "@siemens/ix/components/ix-checkbox-group.js";
import { IxCheckbox as IxCheckboxElement, defineCustomElement as defineIxCheckbox } from "@siemens/ix/components/ix-checkbox.js";
import { IxChip as IxChipElement, defineCustomElement as defineIxChip } from "@siemens/ix/components/ix-chip.js";
import { IxCol as IxColElement, defineCustomElement as defineIxCol } from "@siemens/ix/components/ix-col.js";
import { IxContentHeader as IxContentHeaderElement, defineCustomElement as defineIxContentHeader } from "@siemens/ix/components/ix-content-header.js";
import { IxContent as IxContentElement, defineCustomElement as defineIxContent } from "@siemens/ix/components/ix-content.js";
import { IxCustomField as IxCustomFieldElement, defineCustomElement as defineIxCustomField } from "@siemens/ix/components/ix-custom-field.js";
import { IxDateDropdown as IxDateDropdownElement, defineCustomElement as defineIxDateDropdown } from "@siemens/ix/components/ix-date-dropdown.js";
import { IxDateInput as IxDateInputElement, defineCustomElement as defineIxDateInput } from "@siemens/ix/components/ix-date-input.js";
import { IxDatePicker as IxDatePickerElement, defineCustomElement as defineIxDatePicker } from "@siemens/ix/components/ix-date-picker.js";
import { IxDatetimePicker as IxDatetimePickerElement, defineCustomElement as defineIxDatetimePicker } from "@siemens/ix/components/ix-datetime-picker.js";
import { IxDivider as IxDividerElement, defineCustomElement as defineIxDivider } from "@siemens/ix/components/ix-divider.js";
import { IxDrawer as IxDrawerElement, defineCustomElement as defineIxDrawer } from "@siemens/ix/components/ix-drawer.js";
import { IxDropdownButton as IxDropdownButtonElement, defineCustomElement as defineIxDropdownButton } from "@siemens/ix/components/ix-dropdown-button.js";
import { IxDropdownHeader as IxDropdownHeaderElement, defineCustomElement as defineIxDropdownHeader } from "@siemens/ix/components/ix-dropdown-header.js";
import { IxDropdownItem as IxDropdownItemElement, defineCustomElement as defineIxDropdownItem } from "@siemens/ix/components/ix-dropdown-item.js";
import { IxDropdownQuickActions as IxDropdownQuickActionsElement, defineCustomElement as defineIxDropdownQuickActions } from "@siemens/ix/components/ix-dropdown-quick-actions.js";
import { IxDropdown as IxDropdownElement, defineCustomElement as defineIxDropdown } from "@siemens/ix/components/ix-dropdown.js";
import { IxEmptyState as IxEmptyStateElement, defineCustomElement as defineIxEmptyState } from "@siemens/ix/components/ix-empty-state.js";
import { IxEventListItem as IxEventListItemElement, defineCustomElement as defineIxEventListItem } from "@siemens/ix/components/ix-event-list-item.js";
import { IxEventList as IxEventListElement, defineCustomElement as defineIxEventList } from "@siemens/ix/components/ix-event-list.js";
import { IxExpandingSearch as IxExpandingSearchElement, defineCustomElement as defineIxExpandingSearch } from "@siemens/ix/components/ix-expanding-search.js";
import { IxFieldLabel as IxFieldLabelElement, defineCustomElement as defineIxFieldLabel } from "@siemens/ix/components/ix-field-label.js";
import { IxFilterChip as IxFilterChipElement, defineCustomElement as defineIxFilterChip } from "@siemens/ix/components/ix-filter-chip.js";
import { IxFlipTileContent as IxFlipTileContentElement, defineCustomElement as defineIxFlipTileContent } from "@siemens/ix/components/ix-flip-tile-content.js";
import { IxFlipTile as IxFlipTileElement, defineCustomElement as defineIxFlipTile } from "@siemens/ix/components/ix-flip-tile.js";
import { IxGroupContextMenu as IxGroupContextMenuElement, defineCustomElement as defineIxGroupContextMenu } from "@siemens/ix/components/ix-group-context-menu.js";
import { IxGroupItem as IxGroupItemElement, defineCustomElement as defineIxGroupItem } from "@siemens/ix/components/ix-group-item.js";
import { IxGroup as IxGroupElement, defineCustomElement as defineIxGroup } from "@siemens/ix/components/ix-group.js";
import { IxHelperText as IxHelperTextElement, defineCustomElement as defineIxHelperText } from "@siemens/ix/components/ix-helper-text.js";
import { IxIconButton as IxIconButtonElement, defineCustomElement as defineIxIconButton } from "@siemens/ix/components/ix-icon-button.js";
import { IxIconToggleButton as IxIconToggleButtonElement, defineCustomElement as defineIxIconToggleButton } from "@siemens/ix/components/ix-icon-toggle-button.js";
import { IxInputGroup as IxInputGroupElement, defineCustomElement as defineIxInputGroup } from "@siemens/ix/components/ix-input-group.js";
import { IxInput as IxInputElement, defineCustomElement as defineIxInput } from "@siemens/ix/components/ix-input.js";
import { IxKeyValueList as IxKeyValueListElement, defineCustomElement as defineIxKeyValueList } from "@siemens/ix/components/ix-key-value-list.js";
import { IxKeyValue as IxKeyValueElement, defineCustomElement as defineIxKeyValue } from "@siemens/ix/components/ix-key-value.js";
import { IxKpi as IxKpiElement, defineCustomElement as defineIxKpi } from "@siemens/ix/components/ix-kpi.js";
import { IxLayoutAuto as IxLayoutAutoElement, defineCustomElement as defineIxLayoutAuto } from "@siemens/ix/components/ix-layout-auto.js";
import { IxLayoutGrid as IxLayoutGridElement, defineCustomElement as defineIxLayoutGrid } from "@siemens/ix/components/ix-layout-grid.js";
import { IxLinkButton as IxLinkButtonElement, defineCustomElement as defineIxLinkButton } from "@siemens/ix/components/ix-link-button.js";
import { IxMapNavigationOverlay as IxMapNavigationOverlayElement, defineCustomElement as defineIxMapNavigationOverlay } from "@siemens/ix/components/ix-map-navigation-overlay.js";
import { IxMapNavigation as IxMapNavigationElement, defineCustomElement as defineIxMapNavigation } from "@siemens/ix/components/ix-map-navigation.js";
import { IxMenuAboutItem as IxMenuAboutItemElement, defineCustomElement as defineIxMenuAboutItem } from "@siemens/ix/components/ix-menu-about-item.js";
import { IxMenuAboutNews as IxMenuAboutNewsElement, defineCustomElement as defineIxMenuAboutNews } from "@siemens/ix/components/ix-menu-about-news.js";
import { IxMenuAbout as IxMenuAboutElement, defineCustomElement as defineIxMenuAbout } from "@siemens/ix/components/ix-menu-about.js";
import { IxMenuAvatarItem as IxMenuAvatarItemElement, defineCustomElement as defineIxMenuAvatarItem } from "@siemens/ix/components/ix-menu-avatar-item.js";
import { IxMenuAvatar as IxMenuAvatarElement, defineCustomElement as defineIxMenuAvatar } from "@siemens/ix/components/ix-menu-avatar.js";
import { IxMenuCategory as IxMenuCategoryElement, defineCustomElement as defineIxMenuCategory } from "@siemens/ix/components/ix-menu-category.js";
import { IxMenuItem as IxMenuItemElement, defineCustomElement as defineIxMenuItem } from "@siemens/ix/components/ix-menu-item.js";
import { IxMenuSettingsItem as IxMenuSettingsItemElement, defineCustomElement as defineIxMenuSettingsItem } from "@siemens/ix/components/ix-menu-settings-item.js";
import { IxMenuSettings as IxMenuSettingsElement, defineCustomElement as defineIxMenuSettings } from "@siemens/ix/components/ix-menu-settings.js";
import { IxMenu as IxMenuElement, defineCustomElement as defineIxMenu } from "@siemens/ix/components/ix-menu.js";
import { IxMessageBar as IxMessageBarElement, defineCustomElement as defineIxMessageBar } from "@siemens/ix/components/ix-message-bar.js";
import { IxModalContent as IxModalContentElement, defineCustomElement as defineIxModalContent } from "@siemens/ix/components/ix-modal-content.js";
import { IxModalFooter as IxModalFooterElement, defineCustomElement as defineIxModalFooter } from "@siemens/ix/components/ix-modal-footer.js";
import { IxModalHeader as IxModalHeaderElement, defineCustomElement as defineIxModalHeader } from "@siemens/ix/components/ix-modal-header.js";
import { IxModal as IxModalElement, defineCustomElement as defineIxModal } from "@siemens/ix/components/ix-modal.js";
import { IxNumberInput as IxNumberInputElement, defineCustomElement as defineIxNumberInput } from "@siemens/ix/components/ix-number-input.js";
import { IxPagination as IxPaginationElement, defineCustomElement as defineIxPagination } from "@siemens/ix/components/ix-pagination.js";
import { IxPaneLayout as IxPaneLayoutElement, defineCustomElement as defineIxPaneLayout } from "@siemens/ix/components/ix-pane-layout.js";
import { IxPane as IxPaneElement, defineCustomElement as defineIxPane } from "@siemens/ix/components/ix-pane.js";
import { IxPill as IxPillElement, defineCustomElement as defineIxPill } from "@siemens/ix/components/ix-pill.js";
import { IxPushCard as IxPushCardElement, defineCustomElement as defineIxPushCard } from "@siemens/ix/components/ix-push-card.js";
import { IxRadioGroup as IxRadioGroupElement, defineCustomElement as defineIxRadioGroup } from "@siemens/ix/components/ix-radio-group.js";
import { IxRadio as IxRadioElement, defineCustomElement as defineIxRadio } from "@siemens/ix/components/ix-radio.js";
import { IxRow as IxRowElement, defineCustomElement as defineIxRow } from "@siemens/ix/components/ix-row.js";
import { IxSelectItem as IxSelectItemElement, defineCustomElement as defineIxSelectItem } from "@siemens/ix/components/ix-select-item.js";
import { IxSelect as IxSelectElement, defineCustomElement as defineIxSelect } from "@siemens/ix/components/ix-select.js";
import { IxSlider as IxSliderElement, defineCustomElement as defineIxSlider } from "@siemens/ix/components/ix-slider.js";
import { IxSpinner as IxSpinnerElement, defineCustomElement as defineIxSpinner } from "@siemens/ix/components/ix-spinner.js";
import { IxSplitButton as IxSplitButtonElement, defineCustomElement as defineIxSplitButton } from "@siemens/ix/components/ix-split-button.js";
import { IxTabItem as IxTabItemElement, defineCustomElement as defineIxTabItem } from "@siemens/ix/components/ix-tab-item.js";
import { IxTabs as IxTabsElement, defineCustomElement as defineIxTabs } from "@siemens/ix/components/ix-tabs.js";
import { IxTextarea as IxTextareaElement, defineCustomElement as defineIxTextarea } from "@siemens/ix/components/ix-textarea.js";
import { IxTile as IxTileElement, defineCustomElement as defineIxTile } from "@siemens/ix/components/ix-tile.js";
import { IxTimePicker as IxTimePickerElement, defineCustomElement as defineIxTimePicker } from "@siemens/ix/components/ix-time-picker.js";
import { IxToastContainer as IxToastContainerElement, defineCustomElement as defineIxToastContainer } from "@siemens/ix/components/ix-toast-container.js";
import { IxToast as IxToastElement, defineCustomElement as defineIxToast } from "@siemens/ix/components/ix-toast.js";
import { IxToggleButton as IxToggleButtonElement, defineCustomElement as defineIxToggleButton } from "@siemens/ix/components/ix-toggle-button.js";
import { IxToggle as IxToggleElement, defineCustomElement as defineIxToggle } from "@siemens/ix/components/ix-toggle.js";
import { IxTooltip as IxTooltipElement, defineCustomElement as defineIxTooltip } from "@siemens/ix/components/ix-tooltip.js";
import { IxTypography as IxTypographyElement, defineCustomElement as defineIxTypography } from "@siemens/ix/components/ix-typography.js";
import { IxUpload as IxUploadElement, defineCustomElement as defineIxUpload } from "@siemens/ix/components/ix-upload.js";
import { IxValidationTooltip as IxValidationTooltipElement, defineCustomElement as defineIxValidationTooltip } from "@siemens/ix/components/ix-validation-tooltip.js";
import { IxWorkflowStep as IxWorkflowStepElement, defineCustomElement as defineIxWorkflowStep } from "@siemens/ix/components/ix-workflow-step.js";
import { IxWorkflowSteps as IxWorkflowStepsElement, defineCustomElement as defineIxWorkflowSteps } from "@siemens/ix/components/ix-workflow-steps.js";
import type { EventName, StencilReactComponent } from '@stencil/react-output-target/runtime';
import { createComponent, createSSRComponent } from '@stencil/react-output-target/runtime';
import React from 'react';

type IxActionCardEvents = NonNullable<unknown>;

export const IxActionCard: StencilReactComponent<IxActionCardElement, IxActionCardEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxActionCardElement, IxActionCardEvents>({
        tagName: 'ix-action-card',
        elementClass: IxActionCardElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxActionCardEvents,
        defineCustomElement: defineIxActionCard
    })
    : /*@__PURE__*/ createSSRComponent<IxActionCardElement, IxActionCardEvents>({
        tagName: 'ix-action-card',
        properties: {
            variant: 'variant',
            icon: 'icon',
            heading: 'heading',
            subheading: 'subheading',
            selected: 'selected'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxApplicationEvents = NonNullable<unknown>;

export const IxApplication: StencilReactComponent<IxApplicationElement, IxApplicationEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxApplicationElement, IxApplicationEvents>({
        tagName: 'ix-application',
        elementClass: IxApplicationElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxApplicationEvents,
        defineCustomElement: defineIxApplication
    })
    : /*@__PURE__*/ createSSRComponent<IxApplicationElement, IxApplicationEvents>({
        tagName: 'ix-application',
        properties: {
            theme: 'theme',
            themeSystemAppearance: 'theme-system-appearance',
            forceBreakpoint: 'force-breakpoint'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxApplicationHeaderEvents = {
    onMenuToggle: EventName<CustomEvent<boolean>>,
    onOpenAppSwitch: EventName<CustomEvent<void>>
};

export const IxApplicationHeader: StencilReactComponent<IxApplicationHeaderElement, IxApplicationHeaderEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxApplicationHeaderElement, IxApplicationHeaderEvents>({
        tagName: 'ix-application-header',
        elementClass: IxApplicationHeaderElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onMenuToggle: 'menuToggle',
            onOpenAppSwitch: 'openAppSwitch'
        } as IxApplicationHeaderEvents,
        defineCustomElement: defineIxApplicationHeader
    })
    : /*@__PURE__*/ createSSRComponent<IxApplicationHeaderElement, IxApplicationHeaderEvents>({
        tagName: 'ix-application-header',
        properties: {
            name: 'name',
            showMenu: 'show-menu'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxAvatarEvents = NonNullable<unknown>;

export const IxAvatar: StencilReactComponent<IxAvatarElement, IxAvatarEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxAvatarElement, IxAvatarEvents>({
        tagName: 'ix-avatar',
        elementClass: IxAvatarElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxAvatarEvents,
        defineCustomElement: defineIxAvatar
    })
    : /*@__PURE__*/ createSSRComponent<IxAvatarElement, IxAvatarEvents>({
        tagName: 'ix-avatar',
        properties: {
            image: 'image',
            initials: 'initials',
            username: 'username',
            extra: 'extra'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxBasicNavigationEvents = NonNullable<unknown>;

export const IxBasicNavigation: StencilReactComponent<IxBasicNavigationElement, IxBasicNavigationEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxBasicNavigationElement, IxBasicNavigationEvents>({
        tagName: 'ix-basic-navigation',
        elementClass: IxBasicNavigationElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxBasicNavigationEvents,
        defineCustomElement: defineIxBasicNavigation
    })
    : /*@__PURE__*/ createSSRComponent<IxBasicNavigationElement, IxBasicNavigationEvents>({
        tagName: 'ix-basic-navigation',
        properties: {
            applicationName: 'application-name',
            hideHeader: 'hide-header',
            forceBreakpoint: 'force-breakpoint'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxBlindEvents = { onCollapsedChange: EventName<CustomEvent<boolean>> };

export const IxBlind: StencilReactComponent<IxBlindElement, IxBlindEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxBlindElement, IxBlindEvents>({
        tagName: 'ix-blind',
        elementClass: IxBlindElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onCollapsedChange: 'collapsedChange' } as IxBlindEvents,
        defineCustomElement: defineIxBlind
    })
    : /*@__PURE__*/ createSSRComponent<IxBlindElement, IxBlindEvents>({
        tagName: 'ix-blind',
        properties: {
            collapsed: 'collapsed',
            label: 'label',
            sublabel: 'sublabel',
            icon: 'icon',
            variant: 'variant'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxBreadcrumbEvents = {
    onItemClick: EventName<CustomEvent<string>>,
    onNextClick: EventName<IxBreadcrumbCustomEvent<{ event: UIEvent; item: string }>>
};

export const IxBreadcrumb: StencilReactComponent<IxBreadcrumbElement, IxBreadcrumbEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxBreadcrumbElement, IxBreadcrumbEvents>({
        tagName: 'ix-breadcrumb',
        elementClass: IxBreadcrumbElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onItemClick: 'itemClick',
            onNextClick: 'nextClick'
        } as IxBreadcrumbEvents,
        defineCustomElement: defineIxBreadcrumb
    })
    : /*@__PURE__*/ createSSRComponent<IxBreadcrumbElement, IxBreadcrumbEvents>({
        tagName: 'ix-breadcrumb',
        properties: {
            visibleItemCount: 'visible-item-count',
            ghost: 'ghost',
            ariaLabelPreviousButton: 'aria-label-previous-button'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxBreadcrumbItemEvents = NonNullable<unknown>;

export const IxBreadcrumbItem: StencilReactComponent<IxBreadcrumbItemElement, IxBreadcrumbItemEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxBreadcrumbItemElement, IxBreadcrumbItemEvents>({
        tagName: 'ix-breadcrumb-item',
        elementClass: IxBreadcrumbItemElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxBreadcrumbItemEvents,
        defineCustomElement: defineIxBreadcrumbItem
    })
    : /*@__PURE__*/ createSSRComponent<IxBreadcrumbItemElement, IxBreadcrumbItemEvents>({
        tagName: 'ix-breadcrumb-item',
        properties: {
            label: 'label',
            icon: 'icon',
            ghost: 'ghost',
            visible: 'visible',
            showChevron: 'show-chevron',
            isDropdownTrigger: 'is-dropdown-trigger'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxButtonEvents = NonNullable<unknown>;

export const IxButton: StencilReactComponent<IxButtonElement, IxButtonEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxButtonElement, IxButtonEvents>({
        tagName: 'ix-button',
        elementClass: IxButtonElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxButtonEvents,
        defineCustomElement: defineIxButton
    })
    : /*@__PURE__*/ createSSRComponent<IxButtonElement, IxButtonEvents>({
        tagName: 'ix-button',
        properties: {
            variant: 'variant',
            outline: 'outline',
            ghost: 'ghost',
            disabled: 'disabled',
            type: 'type',
            loading: 'loading',
            icon: 'icon',
            alignment: 'alignment',
            iconSize: 'icon-size'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxCardEvents = NonNullable<unknown>;

export const IxCard: StencilReactComponent<IxCardElement, IxCardEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxCardElement, IxCardEvents>({
        tagName: 'ix-card',
        elementClass: IxCardElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxCardEvents,
        defineCustomElement: defineIxCard
    })
    : /*@__PURE__*/ createSSRComponent<IxCardElement, IxCardEvents>({
        tagName: 'ix-card',
        properties: {
            variant: 'variant',
            selected: 'selected'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxCardAccordionEvents = NonNullable<unknown>;

export const IxCardAccordion: StencilReactComponent<IxCardAccordionElement, IxCardAccordionEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxCardAccordionElement, IxCardAccordionEvents>({
        tagName: 'ix-card-accordion',
        elementClass: IxCardAccordionElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxCardAccordionEvents,
        defineCustomElement: defineIxCardAccordion
    })
    : /*@__PURE__*/ createSSRComponent<IxCardAccordionElement, IxCardAccordionEvents>({
        tagName: 'ix-card-accordion',
        properties: { collapse: 'collapse' },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxCardContentEvents = NonNullable<unknown>;

export const IxCardContent: StencilReactComponent<IxCardContentElement, IxCardContentEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxCardContentElement, IxCardContentEvents>({
        tagName: 'ix-card-content',
        elementClass: IxCardContentElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxCardContentEvents,
        defineCustomElement: defineIxCardContent
    })
    : /*@__PURE__*/ createSSRComponent<IxCardContentElement, IxCardContentEvents>({
        tagName: 'ix-card-content',
        properties: {},
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxCardListEvents = {
    onCollapseChanged: EventName<CustomEvent<boolean>>,
    onShowAllClick: EventName<IxCardListCustomEvent<{
        nativeEvent: MouseEvent;
    }>>,
    onShowMoreCardClick: EventName<IxCardListCustomEvent<{
        nativeEvent: MouseEvent;
    }>>
};

export const IxCardList: StencilReactComponent<IxCardListElement, IxCardListEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxCardListElement, IxCardListEvents>({
        tagName: 'ix-card-list',
        elementClass: IxCardListElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onCollapseChanged: 'collapseChanged',
            onShowAllClick: 'showAllClick',
            onShowMoreCardClick: 'showMoreCardClick'
        } as IxCardListEvents,
        defineCustomElement: defineIxCardList
    })
    : /*@__PURE__*/ createSSRComponent<IxCardListElement, IxCardListEvents>({
        tagName: 'ix-card-list',
        properties: {
            label: 'label',
            collapse: 'collapse',
            listStyle: 'list-style',
            maxVisibleCards: 'max-visible-cards',
            showAllCount: 'show-all-count',
            suppressOverflowHandling: 'suppress-overflow-handling',
            hideShowAll: 'hide-show-all',
            i18nShowAll: 'i-1-8n-show-all',
            i18nMoreCards: 'i-1-8n-more-cards'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxCardTitleEvents = NonNullable<unknown>;

export const IxCardTitle: StencilReactComponent<IxCardTitleElement, IxCardTitleEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxCardTitleElement, IxCardTitleEvents>({
        tagName: 'ix-card-title',
        elementClass: IxCardTitleElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxCardTitleEvents,
        defineCustomElement: defineIxCardTitle
    })
    : /*@__PURE__*/ createSSRComponent<IxCardTitleElement, IxCardTitleEvents>({
        tagName: 'ix-card-title',
        properties: {},
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxCategoryFilterEvents = {
    onCategoryChanged: EventName<CustomEvent<string>>,
    onInputChanged: EventName<IxCategoryFilterCustomEvent<InputState>>,
    onFilterChanged: EventName<IxCategoryFilterCustomEvent<FilterState>>,
    onFilterCleared: EventName<CustomEvent<void>>
};

export const IxCategoryFilter: StencilReactComponent<IxCategoryFilterElement, IxCategoryFilterEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxCategoryFilterElement, IxCategoryFilterEvents>({
        tagName: 'ix-category-filter',
        elementClass: IxCategoryFilterElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onCategoryChanged: 'categoryChanged',
            onInputChanged: 'inputChanged',
            onFilterChanged: 'filterChanged',
            onFilterCleared: 'filterCleared'
        } as IxCategoryFilterEvents,
        defineCustomElement: defineIxCategoryFilter
    })
    : /*@__PURE__*/ createSSRComponent<IxCategoryFilterElement, IxCategoryFilterEvents>({
        tagName: 'ix-category-filter',
        properties: {
            disabled: 'disabled',
            readonly: 'readonly',
            placeholder: 'placeholder',
            icon: 'icon',
            hideIcon: 'hide-icon',
            staticOperator: 'static-operator',
            repeatCategories: 'repeat-categories',
            tmpDisableScrollIntoView: 'tmp-disable-scroll-into-view',
            labelCategories: 'label-categories',
            i18nPlainText: 'i-1-8n-plain-text'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxCheckboxEvents = {
    onCheckedChange: EventName<CustomEvent<boolean>>,
    onValueChange: EventName<CustomEvent<string>>
};

export const IxCheckbox: StencilReactComponent<IxCheckboxElement, IxCheckboxEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxCheckboxElement, IxCheckboxEvents>({
        tagName: 'ix-checkbox',
        elementClass: IxCheckboxElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onCheckedChange: 'checkedChange',
            onValueChange: 'valueChange'
        } as IxCheckboxEvents,
        defineCustomElement: defineIxCheckbox
    })
    : /*@__PURE__*/ createSSRComponent<IxCheckboxElement, IxCheckboxEvents>({
        tagName: 'ix-checkbox',
        properties: {
            name: 'name',
            value: 'value',
            label: 'label',
            checked: 'checked',
            disabled: 'disabled',
            indeterminate: 'indeterminate',
            required: 'required'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxCheckboxGroupEvents = NonNullable<unknown>;

export const IxCheckboxGroup: StencilReactComponent<IxCheckboxGroupElement, IxCheckboxGroupEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxCheckboxGroupElement, IxCheckboxGroupEvents>({
        tagName: 'ix-checkbox-group',
        elementClass: IxCheckboxGroupElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxCheckboxGroupEvents,
        defineCustomElement: defineIxCheckboxGroup
    })
    : /*@__PURE__*/ createSSRComponent<IxCheckboxGroupElement, IxCheckboxGroupEvents>({
        tagName: 'ix-checkbox-group',
        properties: {
            helperText: 'helper-text',
            label: 'label',
            direction: 'direction',
            invalidText: 'invalid-text',
            infoText: 'info-text',
            validText: 'valid-text',
            warningText: 'warning-text',
            showTextAsTooltip: 'show-text-as-tooltip'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxChipEvents = { onCloseChip: EventName<CustomEvent<any>> };

export const IxChip: StencilReactComponent<IxChipElement, IxChipEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxChipElement, IxChipEvents>({
        tagName: 'ix-chip',
        elementClass: IxChipElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onCloseChip: 'closeChip' } as IxChipEvents,
        defineCustomElement: defineIxChip
    })
    : /*@__PURE__*/ createSSRComponent<IxChipElement, IxChipEvents>({
        tagName: 'ix-chip',
        properties: {
            variant: 'variant',
            active: 'active',
            closable: 'closable',
            icon: 'icon',
            background: 'background',
            chipColor: 'chip-color',
            outline: 'outline',
            tooltipText: 'tooltip-text'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxColEvents = NonNullable<unknown>;

export const IxCol: StencilReactComponent<IxColElement, IxColEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxColElement, IxColEvents>({
        tagName: 'ix-col',
        elementClass: IxColElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxColEvents,
        defineCustomElement: defineIxCol
    })
    : /*@__PURE__*/ createSSRComponent<IxColElement, IxColEvents>({
        tagName: 'ix-col',
        properties: {
            size: 'size',
            sizeSm: 'size-sm',
            sizeMd: 'size-md',
            sizeLg: 'size-lg'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxContentEvents = NonNullable<unknown>;

export const IxContent: StencilReactComponent<IxContentElement, IxContentEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxContentElement, IxContentEvents>({
        tagName: 'ix-content',
        elementClass: IxContentElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxContentEvents,
        defineCustomElement: defineIxContent
    })
    : /*@__PURE__*/ createSSRComponent<IxContentElement, IxContentEvents>({
        tagName: 'ix-content',
        properties: {},
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxContentHeaderEvents = { onBackButtonClick: EventName<CustomEvent<void>> };

export const IxContentHeader: StencilReactComponent<IxContentHeaderElement, IxContentHeaderEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxContentHeaderElement, IxContentHeaderEvents>({
        tagName: 'ix-content-header',
        elementClass: IxContentHeaderElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onBackButtonClick: 'backButtonClick' } as IxContentHeaderEvents,
        defineCustomElement: defineIxContentHeader
    })
    : /*@__PURE__*/ createSSRComponent<IxContentHeaderElement, IxContentHeaderEvents>({
        tagName: 'ix-content-header',
        properties: {
            variant: 'variant',
            headerTitle: 'header-title',
            headerSubtitle: 'header-subtitle',
            hasBackButton: 'has-back-button'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxCustomFieldEvents = NonNullable<unknown>;

export const IxCustomField: StencilReactComponent<IxCustomFieldElement, IxCustomFieldEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxCustomFieldElement, IxCustomFieldEvents>({
        tagName: 'ix-custom-field',
        elementClass: IxCustomFieldElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxCustomFieldEvents,
        defineCustomElement: defineIxCustomField
    })
    : /*@__PURE__*/ createSSRComponent<IxCustomFieldElement, IxCustomFieldEvents>({
        tagName: 'ix-custom-field',
        properties: {
            required: 'required',
            label: 'label',
            helperText: 'helper-text',
            infoText: 'info-text',
            warningText: 'warning-text',
            invalidText: 'invalid-text',
            validText: 'valid-text',
            showTextAsTooltip: 'show-text-as-tooltip'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxDateDropdownEvents = { onDateRangeChange: EventName<IxDateDropdownCustomEvent<DateRangeChangeEvent>> };

export const IxDateDropdown: StencilReactComponent<IxDateDropdownElement, IxDateDropdownEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxDateDropdownElement, IxDateDropdownEvents>({
        tagName: 'ix-date-dropdown',
        elementClass: IxDateDropdownElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onDateRangeChange: 'dateRangeChange' } as IxDateDropdownEvents,
        defineCustomElement: defineIxDateDropdown
    })
    : /*@__PURE__*/ createSSRComponent<IxDateDropdownElement, IxDateDropdownEvents>({
        tagName: 'ix-date-dropdown',
        properties: {
            disabled: 'disabled',
            format: 'format',
            range: 'range',
            from: 'from',
            to: 'to',
            minDate: 'min-date',
            maxDate: 'max-date',
            dateRangeId: 'date-range-id',
            variant: 'variant',
            outline: 'outline',
            ghost: 'ghost',
            loading: 'loading',
            customRangeAllowed: 'custom-range-allowed',
            locale: 'locale',
            weekStartIndex: 'week-start-index',
            i18nCustomItem: 'i18n-custom-item',
            i18nDone: 'i18n-done',
            i18nNoRange: 'i18n-no-range',
            today: 'today'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxDateInputEvents = {
    onValueChange: EventName<CustomEvent<string>>,
    onValidityStateChange: EventName<IxDateInputCustomEvent<DateInputValidityState>>
};

export const IxDateInput: StencilReactComponent<IxDateInputElement, IxDateInputEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxDateInputElement, IxDateInputEvents>({
        tagName: 'ix-date-input',
        elementClass: IxDateInputElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onValueChange: 'valueChange',
            onValidityStateChange: 'validityStateChange'
        } as IxDateInputEvents,
        defineCustomElement: defineIxDateInput
    })
    : /*@__PURE__*/ createSSRComponent<IxDateInputElement, IxDateInputEvents>({
        tagName: 'ix-date-input',
        properties: {
            name: 'name',
            placeholder: 'placeholder',
            value: 'value',
            locale: 'locale',
            format: 'format',
            required: 'required',
            helperText: 'helper-text',
            label: 'label',
            invalidText: 'invalid-text',
            readonly: 'readonly',
            disabled: 'disabled',
            infoText: 'info-text',
            warningText: 'warning-text',
            validText: 'valid-text',
            showTextAsTooltip: 'show-text-as-tooltip',
            i18nErrorDateUnparsable: 'i18n-error-date-unparsable'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxDatePickerEvents = {
    onDateChange: EventName<IxDatePickerCustomEvent<DateChangeEvent>>,
    onDateRangeChange: EventName<IxDatePickerCustomEvent<DateChangeEvent>>,
    onDateSelect: EventName<IxDatePickerCustomEvent<DateChangeEvent>>
};

export const IxDatePicker: StencilReactComponent<IxDatePickerElement, IxDatePickerEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxDatePickerElement, IxDatePickerEvents>({
        tagName: 'ix-date-picker',
        elementClass: IxDatePickerElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onDateChange: 'dateChange',
            onDateRangeChange: 'dateRangeChange',
            onDateSelect: 'dateSelect'
        } as IxDatePickerEvents,
        defineCustomElement: defineIxDatePicker
    })
    : /*@__PURE__*/ createSSRComponent<IxDatePickerElement, IxDatePickerEvents>({
        tagName: 'ix-date-picker',
        properties: {
            format: 'format',
            range: 'range',
            corners: 'corners',
            from: 'from',
            to: 'to',
            minDate: 'min-date',
            maxDate: 'max-date',
            i18nDone: 'i18n-done',
            weekStartIndex: 'week-start-index',
            locale: 'locale',
            standaloneAppearance: 'standalone-appearance',
            today: 'today'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxDatetimePickerEvents = {
    onTimeChange: EventName<CustomEvent<string>>,
    onDateChange: EventName<IxDatetimePickerCustomEvent<DateTimeDateChangeEvent>>,
    onDateSelect: EventName<IxDatetimePickerCustomEvent<DateTimeSelectEvent>>
};

export const IxDatetimePicker: StencilReactComponent<IxDatetimePickerElement, IxDatetimePickerEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxDatetimePickerElement, IxDatetimePickerEvents>({
        tagName: 'ix-datetime-picker',
        elementClass: IxDatetimePickerElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onTimeChange: 'timeChange',
            onDateChange: 'dateChange',
            onDateSelect: 'dateSelect'
        } as IxDatetimePickerEvents,
        defineCustomElement: defineIxDatetimePicker
    })
    : /*@__PURE__*/ createSSRComponent<IxDatetimePickerElement, IxDatetimePickerEvents>({
        tagName: 'ix-datetime-picker',
        properties: {
            range: 'range',
            showHour: 'show-hour',
            showMinutes: 'show-minutes',
            showSeconds: 'show-seconds',
            minDate: 'min-date',
            maxDate: 'max-date',
            dateFormat: 'date-format',
            timeFormat: 'time-format',
            from: 'from',
            to: 'to',
            time: 'time',
            showTimeReference: 'show-time-reference',
            timeReference: 'time-reference',
            i18nDone: 'i18n-done',
            weekStartIndex: 'week-start-index',
            locale: 'locale'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxDividerEvents = NonNullable<unknown>;

export const IxDivider: StencilReactComponent<IxDividerElement, IxDividerEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxDividerElement, IxDividerEvents>({
        tagName: 'ix-divider',
        elementClass: IxDividerElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxDividerEvents,
        defineCustomElement: defineIxDivider
    })
    : /*@__PURE__*/ createSSRComponent<IxDividerElement, IxDividerEvents>({
        tagName: 'ix-divider',
        properties: {},
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxDrawerEvents = {
    onOpen: EventName<CustomEvent<any>>,
    onDrawerClose: EventName<CustomEvent<any>>
};

export const IxDrawer: StencilReactComponent<IxDrawerElement, IxDrawerEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxDrawerElement, IxDrawerEvents>({
        tagName: 'ix-drawer',
        elementClass: IxDrawerElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onOpen: 'open',
            onDrawerClose: 'drawerClose'
        } as IxDrawerEvents,
        defineCustomElement: defineIxDrawer
    })
    : /*@__PURE__*/ createSSRComponent<IxDrawerElement, IxDrawerEvents>({
        tagName: 'ix-drawer',
        properties: {
            show: 'show',
            closeOnClickOutside: 'close-on-click-outside',
            fullHeight: 'full-height',
            minWidth: 'min-width',
            maxWidth: 'max-width',
            width: 'width'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxDropdownEvents = { onShowChanged: EventName<CustomEvent<boolean>> };

export const IxDropdown: StencilReactComponent<IxDropdownElement, IxDropdownEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxDropdownElement, IxDropdownEvents>({
        tagName: 'ix-dropdown',
        elementClass: IxDropdownElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onShowChanged: 'showChanged' } as IxDropdownEvents,
        defineCustomElement: defineIxDropdown
    })
    : /*@__PURE__*/ createSSRComponent<IxDropdownElement, IxDropdownEvents>({
        tagName: 'ix-dropdown',
        properties: {
            suppressAutomaticPlacement: 'suppress-automatic-placement',
            show: 'show',
            trigger: 'trigger',
            anchor: 'anchor',
            closeBehavior: 'close-behavior',
            placement: 'placement',
            positioningStrategy: 'positioning-strategy',
            header: 'header',
            discoverAllSubmenus: 'discover-all-submenus',
            ignoreRelatedSubmenu: 'ignore-related-submenu',
            suppressOverflowBehavior: 'suppress-overflow-behavior'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxDropdownButtonEvents = NonNullable<unknown>;

export const IxDropdownButton: StencilReactComponent<IxDropdownButtonElement, IxDropdownButtonEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxDropdownButtonElement, IxDropdownButtonEvents>({
        tagName: 'ix-dropdown-button',
        elementClass: IxDropdownButtonElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxDropdownButtonEvents,
        defineCustomElement: defineIxDropdownButton
    })
    : /*@__PURE__*/ createSSRComponent<IxDropdownButtonElement, IxDropdownButtonEvents>({
        tagName: 'ix-dropdown-button',
        properties: {
            variant: 'variant',
            outline: 'outline',
            ghost: 'ghost',
            disabled: 'disabled',
            label: 'label',
            icon: 'icon',
            closeBehavior: 'close-behavior',
            placement: 'placement'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxDropdownHeaderEvents = NonNullable<unknown>;

export const IxDropdownHeader: StencilReactComponent<IxDropdownHeaderElement, IxDropdownHeaderEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxDropdownHeaderElement, IxDropdownHeaderEvents>({
        tagName: 'ix-dropdown-header',
        elementClass: IxDropdownHeaderElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxDropdownHeaderEvents,
        defineCustomElement: defineIxDropdownHeader
    })
    : /*@__PURE__*/ createSSRComponent<IxDropdownHeaderElement, IxDropdownHeaderEvents>({
        tagName: 'ix-dropdown-header',
        properties: { label: 'label' },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxDropdownItemEvents = NonNullable<unknown>;

export const IxDropdownItem: StencilReactComponent<IxDropdownItemElement, IxDropdownItemEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxDropdownItemElement, IxDropdownItemEvents>({
        tagName: 'ix-dropdown-item',
        elementClass: IxDropdownItemElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxDropdownItemEvents,
        defineCustomElement: defineIxDropdownItem
    })
    : /*@__PURE__*/ createSSRComponent<IxDropdownItemElement, IxDropdownItemEvents>({
        tagName: 'ix-dropdown-item',
        properties: {
            label: 'label',
            icon: 'icon',
            hover: 'hover',
            disabled: 'disabled',
            checked: 'checked',
            isSubMenu: 'is-sub-menu',
            suppressChecked: 'suppress-checked'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxDropdownQuickActionsEvents = NonNullable<unknown>;

export const IxDropdownQuickActions: StencilReactComponent<IxDropdownQuickActionsElement, IxDropdownQuickActionsEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxDropdownQuickActionsElement, IxDropdownQuickActionsEvents>({
        tagName: 'ix-dropdown-quick-actions',
        elementClass: IxDropdownQuickActionsElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxDropdownQuickActionsEvents,
        defineCustomElement: defineIxDropdownQuickActions
    })
    : /*@__PURE__*/ createSSRComponent<IxDropdownQuickActionsElement, IxDropdownQuickActionsEvents>({
        tagName: 'ix-dropdown-quick-actions',
        properties: {},
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxEmptyStateEvents = { onActionClick: EventName<CustomEvent<void>> };

export const IxEmptyState: StencilReactComponent<IxEmptyStateElement, IxEmptyStateEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxEmptyStateElement, IxEmptyStateEvents>({
        tagName: 'ix-empty-state',
        elementClass: IxEmptyStateElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onActionClick: 'actionClick' } as IxEmptyStateEvents,
        defineCustomElement: defineIxEmptyState
    })
    : /*@__PURE__*/ createSSRComponent<IxEmptyStateElement, IxEmptyStateEvents>({
        tagName: 'ix-empty-state',
        properties: {
            layout: 'layout',
            icon: 'icon',
            header: 'header',
            subHeader: 'sub-header',
            action: 'action'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxEventListEvents = NonNullable<unknown>;

export const IxEventList: StencilReactComponent<IxEventListElement, IxEventListEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxEventListElement, IxEventListEvents>({
        tagName: 'ix-event-list',
        elementClass: IxEventListElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxEventListEvents,
        defineCustomElement: defineIxEventList
    })
    : /*@__PURE__*/ createSSRComponent<IxEventListElement, IxEventListEvents>({
        tagName: 'ix-event-list',
        properties: {
            itemHeight: 'item-height',
            compact: 'compact',
            animated: 'animated',
            chevron: 'chevron'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxEventListItemEvents = { onItemClick: EventName<CustomEvent<any>> };

export const IxEventListItem: StencilReactComponent<IxEventListItemElement, IxEventListItemEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxEventListItemElement, IxEventListItemEvents>({
        tagName: 'ix-event-list-item',
        elementClass: IxEventListItemElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onItemClick: 'itemClick' } as IxEventListItemEvents,
        defineCustomElement: defineIxEventListItem
    })
    : /*@__PURE__*/ createSSRComponent<IxEventListItemElement, IxEventListItemEvents>({
        tagName: 'ix-event-list-item',
        properties: {
            itemColor: 'item-color',
            selected: 'selected',
            disabled: 'disabled',
            chevron: 'chevron'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxExpandingSearchEvents = { onValueChange: EventName<CustomEvent<string>> };

export const IxExpandingSearch: StencilReactComponent<IxExpandingSearchElement, IxExpandingSearchEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxExpandingSearchElement, IxExpandingSearchEvents>({
        tagName: 'ix-expanding-search',
        elementClass: IxExpandingSearchElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onValueChange: 'valueChange' } as IxExpandingSearchEvents,
        defineCustomElement: defineIxExpandingSearch
    })
    : /*@__PURE__*/ createSSRComponent<IxExpandingSearchElement, IxExpandingSearchEvents>({
        tagName: 'ix-expanding-search',
        properties: {
            icon: 'icon',
            placeholder: 'placeholder',
            value: 'value',
            fullWidth: 'full-width',
            variant: 'variant',
            outline: 'outline',
            ghost: 'ghost'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxFieldLabelEvents = NonNullable<unknown>;

export const IxFieldLabel: StencilReactComponent<IxFieldLabelElement, IxFieldLabelEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxFieldLabelElement, IxFieldLabelEvents>({
        tagName: 'ix-field-label',
        elementClass: IxFieldLabelElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxFieldLabelEvents,
        defineCustomElement: defineIxFieldLabel
    })
    : /*@__PURE__*/ createSSRComponent<IxFieldLabelElement, IxFieldLabelEvents>({
        tagName: 'ix-field-label',
        properties: {
            required: 'required',
            htmlFor: 'html-for',
            isInvalid: 'is-invalid'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxFilterChipEvents = { onCloseClick: EventName<CustomEvent<void>> };

export const IxFilterChip: StencilReactComponent<IxFilterChipElement, IxFilterChipEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxFilterChipElement, IxFilterChipEvents>({
        tagName: 'ix-filter-chip',
        elementClass: IxFilterChipElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onCloseClick: 'closeClick' } as IxFilterChipEvents,
        defineCustomElement: defineIxFilterChip
    })
    : /*@__PURE__*/ createSSRComponent<IxFilterChipElement, IxFilterChipEvents>({
        tagName: 'ix-filter-chip',
        properties: {
            disabled: 'disabled',
            readonly: 'readonly'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxFlipTileEvents = { onToggle: EventName<CustomEvent<number>> };

export const IxFlipTile: StencilReactComponent<IxFlipTileElement, IxFlipTileEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxFlipTileElement, IxFlipTileEvents>({
        tagName: 'ix-flip-tile',
        elementClass: IxFlipTileElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onToggle: 'toggle' } as IxFlipTileEvents,
        defineCustomElement: defineIxFlipTile
    })
    : /*@__PURE__*/ createSSRComponent<IxFlipTileElement, IxFlipTileEvents>({
        tagName: 'ix-flip-tile',
        properties: {
            state: 'state',
            height: 'height',
            width: 'width',
            index: 'index'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxFlipTileContentEvents = NonNullable<unknown>;

export const IxFlipTileContent: StencilReactComponent<IxFlipTileContentElement, IxFlipTileContentEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxFlipTileContentElement, IxFlipTileContentEvents>({
        tagName: 'ix-flip-tile-content',
        elementClass: IxFlipTileContentElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxFlipTileContentEvents,
        defineCustomElement: defineIxFlipTileContent
    })
    : /*@__PURE__*/ createSSRComponent<IxFlipTileContentElement, IxFlipTileContentEvents>({
        tagName: 'ix-flip-tile-content',
        properties: { contentVisible: 'content-visible' },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxGroupEvents = {
    onSelectGroup: EventName<CustomEvent<boolean>>,
    onSelectItem: EventName<CustomEvent<number>>,
    onCollapsedChanged: EventName<CustomEvent<boolean>>
};

export const IxGroup: StencilReactComponent<IxGroupElement, IxGroupEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxGroupElement, IxGroupEvents>({
        tagName: 'ix-group',
        elementClass: IxGroupElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onSelectGroup: 'selectGroup',
            onSelectItem: 'selectItem',
            onCollapsedChanged: 'collapsedChanged'
        } as IxGroupEvents,
        defineCustomElement: defineIxGroup
    })
    : /*@__PURE__*/ createSSRComponent<IxGroupElement, IxGroupEvents>({
        tagName: 'ix-group',
        properties: {
            suppressHeaderSelection: 'suppress-header-selection',
            header: 'header',
            subHeader: 'sub-header',
            collapsed: 'collapsed',
            selected: 'selected',
            index: 'index',
            expandOnHeaderClick: 'expand-on-header-click'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxGroupContextMenuEvents = NonNullable<unknown>;

export const IxGroupContextMenu: StencilReactComponent<IxGroupContextMenuElement, IxGroupContextMenuEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxGroupContextMenuElement, IxGroupContextMenuEvents>({
        tagName: 'ix-group-context-menu',
        elementClass: IxGroupContextMenuElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxGroupContextMenuEvents,
        defineCustomElement: defineIxGroupContextMenu
    })
    : /*@__PURE__*/ createSSRComponent<IxGroupContextMenuElement, IxGroupContextMenuEvents>({
        tagName: 'ix-group-context-menu',
        properties: {},
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxGroupItemEvents = { onSelectedChanged: EventName<IxGroupItemCustomEvent<HTMLIxGroupItemElement>> };

export const IxGroupItem: StencilReactComponent<IxGroupItemElement, IxGroupItemEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxGroupItemElement, IxGroupItemEvents>({
        tagName: 'ix-group-item',
        elementClass: IxGroupItemElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onSelectedChanged: 'selectedChanged' } as IxGroupItemEvents,
        defineCustomElement: defineIxGroupItem
    })
    : /*@__PURE__*/ createSSRComponent<IxGroupItemElement, IxGroupItemEvents>({
        tagName: 'ix-group-item',
        properties: {
            icon: 'icon',
            text: 'text',
            secondaryText: 'secondary-text',
            suppressSelection: 'suppress-selection',
            selected: 'selected',
            focusable: 'focusable',
            index: 'index'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxHelperTextEvents = NonNullable<unknown>;

export const IxHelperText: StencilReactComponent<IxHelperTextElement, IxHelperTextEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxHelperTextElement, IxHelperTextEvents>({
        tagName: 'ix-helper-text',
        elementClass: IxHelperTextElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxHelperTextEvents,
        defineCustomElement: defineIxHelperText
    })
    : /*@__PURE__*/ createSSRComponent<IxHelperTextElement, IxHelperTextEvents>({
        tagName: 'ix-helper-text',
        properties: {
            htmlFor: 'html-for',
            helperText: 'helper-text',
            invalidText: 'invalid-text',
            validText: 'valid-text',
            infoText: 'info-text',
            warningText: 'warning-text'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxIconButtonEvents = NonNullable<unknown>;

export const IxIconButton: StencilReactComponent<IxIconButtonElement, IxIconButtonEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxIconButtonElement, IxIconButtonEvents>({
        tagName: 'ix-icon-button',
        elementClass: IxIconButtonElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxIconButtonEvents,
        defineCustomElement: defineIxIconButton
    })
    : /*@__PURE__*/ createSSRComponent<IxIconButtonElement, IxIconButtonEvents>({
        tagName: 'ix-icon-button',
        properties: {
            a11yLabel: 'a11y-label',
            variant: 'variant',
            outline: 'outline',
            ghost: 'ghost',
            oval: 'oval',
            icon: 'icon',
            size: 'size',
            iconColor: 'icon-color',
            disabled: 'disabled',
            type: 'type',
            loading: 'loading'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxIconToggleButtonEvents = { onPressedChange: EventName<CustomEvent<boolean>> };

export const IxIconToggleButton: StencilReactComponent<IxIconToggleButtonElement, IxIconToggleButtonEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxIconToggleButtonElement, IxIconToggleButtonEvents>({
        tagName: 'ix-icon-toggle-button',
        elementClass: IxIconToggleButtonElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onPressedChange: 'pressedChange' } as IxIconToggleButtonEvents,
        defineCustomElement: defineIxIconToggleButton
    })
    : /*@__PURE__*/ createSSRComponent<IxIconToggleButtonElement, IxIconToggleButtonEvents>({
        tagName: 'ix-icon-toggle-button',
        properties: {
            variant: 'variant',
            outline: 'outline',
            ghost: 'ghost',
            icon: 'icon',
            pressed: 'pressed',
            size: 'size',
            disabled: 'disabled',
            loading: 'loading'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxInputEvents = {
    onValueChange: EventName<CustomEvent<string>>,
    onValidityStateChange: EventName<IxInputCustomEvent<ValidityState>>,
    onIxBlur: EventName<CustomEvent<void>>
};

export const IxInput: StencilReactComponent<IxInputElement, IxInputEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxInputElement, IxInputEvents>({
        tagName: 'ix-input',
        elementClass: IxInputElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onValueChange: 'valueChange',
            onValidityStateChange: 'validityStateChange',
            onIxBlur: 'ixBlur'
        } as IxInputEvents,
        defineCustomElement: defineIxInput
    })
    : /*@__PURE__*/ createSSRComponent<IxInputElement, IxInputEvents>({
        tagName: 'ix-input',
        properties: {
            type: 'type',
            name: 'name',
            placeholder: 'placeholder',
            value: 'value',
            required: 'required',
            disabled: 'disabled',
            readonly: 'readonly',
            helperText: 'helper-text',
            infoText: 'info-text',
            showTextAsTooltip: 'show-text-as-tooltip',
            validText: 'valid-text',
            warningText: 'warning-text',
            label: 'label',
            invalidText: 'invalid-text',
            pattern: 'pattern',
            maxLength: 'max-length',
            minLength: 'min-length',
            allowedCharactersPattern: 'allowed-characters-pattern'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxInputGroupEvents = NonNullable<unknown>;

export const IxInputGroup: StencilReactComponent<IxInputGroupElement, IxInputGroupEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxInputGroupElement, IxInputGroupEvents>({
        tagName: 'ix-input-group',
        elementClass: IxInputGroupElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxInputGroupEvents,
        defineCustomElement: defineIxInputGroup
    })
    : /*@__PURE__*/ createSSRComponent<IxInputGroupElement, IxInputGroupEvents>({
        tagName: 'ix-input-group',
        properties: {},
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxKeyValueEvents = NonNullable<unknown>;

export const IxKeyValue: StencilReactComponent<IxKeyValueElement, IxKeyValueEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxKeyValueElement, IxKeyValueEvents>({
        tagName: 'ix-key-value',
        elementClass: IxKeyValueElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxKeyValueEvents,
        defineCustomElement: defineIxKeyValue
    })
    : /*@__PURE__*/ createSSRComponent<IxKeyValueElement, IxKeyValueEvents>({
        tagName: 'ix-key-value',
        properties: {
            icon: 'icon',
            label: 'label',
            labelPosition: 'label-position',
            value: 'value'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxKeyValueListEvents = NonNullable<unknown>;

export const IxKeyValueList: StencilReactComponent<IxKeyValueListElement, IxKeyValueListEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxKeyValueListElement, IxKeyValueListEvents>({
        tagName: 'ix-key-value-list',
        elementClass: IxKeyValueListElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxKeyValueListEvents,
        defineCustomElement: defineIxKeyValueList
    })
    : /*@__PURE__*/ createSSRComponent<IxKeyValueListElement, IxKeyValueListEvents>({
        tagName: 'ix-key-value-list',
        properties: { striped: 'striped' },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxKpiEvents = NonNullable<unknown>;

export const IxKpi: StencilReactComponent<IxKpiElement, IxKpiEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxKpiElement, IxKpiEvents>({
        tagName: 'ix-kpi',
        elementClass: IxKpiElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxKpiEvents,
        defineCustomElement: defineIxKpi
    })
    : /*@__PURE__*/ createSSRComponent<IxKpiElement, IxKpiEvents>({
        tagName: 'ix-kpi',
        properties: {
            label: 'label',
            value: 'value',
            unit: 'unit',
            state: 'state',
            orientation: 'orientation'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxLayoutAutoEvents = NonNullable<unknown>;

export const IxLayoutAuto: StencilReactComponent<IxLayoutAutoElement, IxLayoutAutoEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxLayoutAutoElement, IxLayoutAutoEvents>({
        tagName: 'ix-layout-auto',
        elementClass: IxLayoutAutoElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxLayoutAutoEvents,
        defineCustomElement: defineIxLayoutAuto
    })
    : /*@__PURE__*/ createSSRComponent<IxLayoutAutoElement, IxLayoutAutoEvents>({
        tagName: 'ix-layout-auto',
        properties: {},
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxLayoutGridEvents = NonNullable<unknown>;

export const IxLayoutGrid: StencilReactComponent<IxLayoutGridElement, IxLayoutGridEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxLayoutGridElement, IxLayoutGridEvents>({
        tagName: 'ix-layout-grid',
        elementClass: IxLayoutGridElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxLayoutGridEvents,
        defineCustomElement: defineIxLayoutGrid
    })
    : /*@__PURE__*/ createSSRComponent<IxLayoutGridElement, IxLayoutGridEvents>({
        tagName: 'ix-layout-grid',
        properties: {
            noMargin: 'no-margin',
            gap: 'gap',
            columns: 'columns'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxLinkButtonEvents = NonNullable<unknown>;

export const IxLinkButton: StencilReactComponent<IxLinkButtonElement, IxLinkButtonEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxLinkButtonElement, IxLinkButtonEvents>({
        tagName: 'ix-link-button',
        elementClass: IxLinkButtonElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxLinkButtonEvents,
        defineCustomElement: defineIxLinkButton
    })
    : /*@__PURE__*/ createSSRComponent<IxLinkButtonElement, IxLinkButtonEvents>({
        tagName: 'ix-link-button',
        properties: {
            disabled: 'disabled',
            url: 'url',
            target: 'target'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxMapNavigationEvents = {
    onNavigationToggled: EventName<CustomEvent<boolean>>,
    onContextMenuClick: EventName<CustomEvent<void>>
};

export const IxMapNavigation: StencilReactComponent<IxMapNavigationElement, IxMapNavigationEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxMapNavigationElement, IxMapNavigationEvents>({
        tagName: 'ix-map-navigation',
        elementClass: IxMapNavigationElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onNavigationToggled: 'navigationToggled',
            onContextMenuClick: 'contextMenuClick'
        } as IxMapNavigationEvents,
        defineCustomElement: defineIxMapNavigation
    })
    : /*@__PURE__*/ createSSRComponent<IxMapNavigationElement, IxMapNavigationEvents>({
        tagName: 'ix-map-navigation',
        properties: {
            applicationName: 'application-name',
            navigationTitle: 'navigation-title',
            hideContextMenu: 'hide-context-menu'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxMapNavigationOverlayEvents = { onCloseClick: EventName<CustomEvent<any>> };

export const IxMapNavigationOverlay: StencilReactComponent<IxMapNavigationOverlayElement, IxMapNavigationOverlayEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxMapNavigationOverlayElement, IxMapNavigationOverlayEvents>({
        tagName: 'ix-map-navigation-overlay',
        elementClass: IxMapNavigationOverlayElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onCloseClick: 'closeClick' } as IxMapNavigationOverlayEvents,
        defineCustomElement: defineIxMapNavigationOverlay
    })
    : /*@__PURE__*/ createSSRComponent<IxMapNavigationOverlayElement, IxMapNavigationOverlayEvents>({
        tagName: 'ix-map-navigation-overlay',
        properties: {
            name: 'name',
            icon: 'icon',
            color: 'color',
            iconColor: 'icon-color'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxMenuEvents = {
    onExpandChange: EventName<CustomEvent<boolean>>,
    onMapExpandChange: EventName<CustomEvent<boolean>>,
    onOpenAppSwitch: EventName<CustomEvent<void>>,
    onOpenSettings: EventName<CustomEvent<void>>,
    onOpenAbout: EventName<CustomEvent<void>>
};

export const IxMenu: StencilReactComponent<IxMenuElement, IxMenuEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxMenuElement, IxMenuEvents>({
        tagName: 'ix-menu',
        elementClass: IxMenuElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onExpandChange: 'expandChange',
            onMapExpandChange: 'mapExpandChange',
            onOpenAppSwitch: 'openAppSwitch',
            onOpenSettings: 'openSettings',
            onOpenAbout: 'openAbout'
        } as IxMenuEvents,
        defineCustomElement: defineIxMenu
    })
    : /*@__PURE__*/ createSSRComponent<IxMenuElement, IxMenuEvents>({
        tagName: 'ix-menu',
        properties: {
            showSettings: 'show-settings',
            showAbout: 'show-about',
            enableToggleTheme: 'enable-toggle-theme',
            enableSettings: 'enable-settings',
            enableMapExpand: 'enable-map-expand',
            applicationName: 'application-name',
            applicationDescription: 'application-description',
            i18nExpandSidebar: 'i-1-8n-expand-sidebar',
            expand: 'expand',
            startExpanded: 'start-expanded',
            pinned: 'pinned',
            i18nLegal: 'i-1-8n-legal',
            i18nSettings: 'i-1-8n-settings',
            i18nToggleTheme: 'i-1-8n-toggle-theme',
            i18nExpand: 'i-1-8n-expand',
            i18nCollapse: 'i-1-8n-collapse'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxMenuAboutEvents = {
    onTabChange: EventName<CustomEvent<string>>,
    onClose: EventName<IxMenuAboutCustomEvent<CustomCloseEvent>>
};

export const IxMenuAbout: StencilReactComponent<IxMenuAboutElement, IxMenuAboutEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxMenuAboutElement, IxMenuAboutEvents>({
        tagName: 'ix-menu-about',
        elementClass: IxMenuAboutElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onTabChange: 'tabChange',
            onClose: 'close'
        } as IxMenuAboutEvents,
        defineCustomElement: defineIxMenuAbout
    })
    : /*@__PURE__*/ createSSRComponent<IxMenuAboutElement, IxMenuAboutEvents>({
        tagName: 'ix-menu-about',
        properties: {
            activeTabLabel: 'active-tab-label',
            label: 'label',
            show: 'show'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxMenuAboutItemEvents = { onLabelChange: EventName<IxMenuAboutItemCustomEvent<CustomLabelChangeEvent>> };

export const IxMenuAboutItem: StencilReactComponent<IxMenuAboutItemElement, IxMenuAboutItemEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxMenuAboutItemElement, IxMenuAboutItemEvents>({
        tagName: 'ix-menu-about-item',
        elementClass: IxMenuAboutItemElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onLabelChange: 'labelChange' } as IxMenuAboutItemEvents,
        defineCustomElement: defineIxMenuAboutItem
    })
    : /*@__PURE__*/ createSSRComponent<IxMenuAboutItemElement, IxMenuAboutItemEvents>({
        tagName: 'ix-menu-about-item',
        properties: { label: 'label' },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxMenuAboutNewsEvents = {
    onShowMore: EventName<IxMenuAboutNewsCustomEvent<MouseEvent>>,
    onClosePopover: EventName<CustomEvent<void>>
};

export const IxMenuAboutNews: StencilReactComponent<IxMenuAboutNewsElement, IxMenuAboutNewsEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxMenuAboutNewsElement, IxMenuAboutNewsEvents>({
        tagName: 'ix-menu-about-news',
        elementClass: IxMenuAboutNewsElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onShowMore: 'showMore',
            onClosePopover: 'closePopover'
        } as IxMenuAboutNewsEvents,
        defineCustomElement: defineIxMenuAboutNews
    })
    : /*@__PURE__*/ createSSRComponent<IxMenuAboutNewsElement, IxMenuAboutNewsEvents>({
        tagName: 'ix-menu-about-news',
        properties: {
            show: 'show',
            label: 'label',
            i18nShowMore: 'i-1-8n-show-more',
            aboutItemLabel: 'about-item-label',
            offsetBottom: 'offset-bottom',
            expanded: 'expanded'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxMenuAvatarEvents = { onLogoutClick: EventName<CustomEvent<any>> };

export const IxMenuAvatar: StencilReactComponent<IxMenuAvatarElement, IxMenuAvatarEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxMenuAvatarElement, IxMenuAvatarEvents>({
        tagName: 'ix-menu-avatar',
        elementClass: IxMenuAvatarElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onLogoutClick: 'logoutClick' } as IxMenuAvatarEvents,
        defineCustomElement: defineIxMenuAvatar
    })
    : /*@__PURE__*/ createSSRComponent<IxMenuAvatarElement, IxMenuAvatarEvents>({
        tagName: 'ix-menu-avatar',
        properties: {
            top: 'top',
            bottom: 'bottom',
            image: 'image',
            initials: 'initials',
            i18nLogout: 'i-1-8n-logout',
            showLogoutButton: 'show-logout-button'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxMenuAvatarItemEvents = { onItemClick: EventName<IxMenuAvatarItemCustomEvent<MouseEvent>> };

export const IxMenuAvatarItem: StencilReactComponent<IxMenuAvatarItemElement, IxMenuAvatarItemEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxMenuAvatarItemElement, IxMenuAvatarItemEvents>({
        tagName: 'ix-menu-avatar-item',
        elementClass: IxMenuAvatarItemElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onItemClick: 'itemClick' } as IxMenuAvatarItemEvents,
        defineCustomElement: defineIxMenuAvatarItem
    })
    : /*@__PURE__*/ createSSRComponent<IxMenuAvatarItemElement, IxMenuAvatarItemEvents>({
        tagName: 'ix-menu-avatar-item',
        properties: {
            icon: 'icon',
            label: 'label'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxMenuCategoryEvents = NonNullable<unknown>;

export const IxMenuCategory: StencilReactComponent<IxMenuCategoryElement, IxMenuCategoryEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxMenuCategoryElement, IxMenuCategoryEvents>({
        tagName: 'ix-menu-category',
        elementClass: IxMenuCategoryElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxMenuCategoryEvents,
        defineCustomElement: defineIxMenuCategory
    })
    : /*@__PURE__*/ createSSRComponent<IxMenuCategoryElement, IxMenuCategoryEvents>({
        tagName: 'ix-menu-category',
        properties: {
            label: 'label',
            icon: 'icon',
            notifications: 'notifications'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxMenuItemEvents = NonNullable<unknown>;

export const IxMenuItem: StencilReactComponent<IxMenuItemElement, IxMenuItemEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxMenuItemElement, IxMenuItemEvents>({
        tagName: 'ix-menu-item',
        elementClass: IxMenuItemElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxMenuItemEvents,
        defineCustomElement: defineIxMenuItem
    })
    : /*@__PURE__*/ createSSRComponent<IxMenuItemElement, IxMenuItemEvents>({
        tagName: 'ix-menu-item',
        properties: {
            label: 'label',
            home: 'home',
            bottom: 'bottom',
            icon: 'icon',
            notifications: 'notifications',
            active: 'active',
            disabled: 'disabled',
            isCategory: 'is-category'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxMenuSettingsEvents = {
    onTabChange: EventName<CustomEvent<string>>,
    onClose: EventName<IxMenuSettingsCustomEvent<CustomCloseEvent>>
};

export const IxMenuSettings: StencilReactComponent<IxMenuSettingsElement, IxMenuSettingsEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxMenuSettingsElement, IxMenuSettingsEvents>({
        tagName: 'ix-menu-settings',
        elementClass: IxMenuSettingsElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onTabChange: 'tabChange',
            onClose: 'close'
        } as IxMenuSettingsEvents,
        defineCustomElement: defineIxMenuSettings
    })
    : /*@__PURE__*/ createSSRComponent<IxMenuSettingsElement, IxMenuSettingsEvents>({
        tagName: 'ix-menu-settings',
        properties: {
            activeTabLabel: 'active-tab-label',
            label: 'label',
            show: 'show'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxMenuSettingsItemEvents = { onLabelChange: EventName<IxMenuSettingsItemCustomEvent<CustomLabelChangeEvent>> };

export const IxMenuSettingsItem: StencilReactComponent<IxMenuSettingsItemElement, IxMenuSettingsItemEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxMenuSettingsItemElement, IxMenuSettingsItemEvents>({
        tagName: 'ix-menu-settings-item',
        elementClass: IxMenuSettingsItemElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onLabelChange: 'labelChange' } as IxMenuSettingsItemEvents,
        defineCustomElement: defineIxMenuSettingsItem
    })
    : /*@__PURE__*/ createSSRComponent<IxMenuSettingsItemElement, IxMenuSettingsItemEvents>({
        tagName: 'ix-menu-settings-item',
        properties: { label: 'label' },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxMessageBarEvents = {
    onClosedChange: EventName<CustomEvent<any>>,
    onCloseAnimationCompleted: EventName<CustomEvent<any>>
};

export const IxMessageBar: StencilReactComponent<IxMessageBarElement, IxMessageBarEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxMessageBarElement, IxMessageBarEvents>({
        tagName: 'ix-message-bar',
        elementClass: IxMessageBarElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onClosedChange: 'closedChange',
            onCloseAnimationCompleted: 'closeAnimationCompleted'
        } as IxMessageBarEvents,
        defineCustomElement: defineIxMessageBar
    })
    : /*@__PURE__*/ createSSRComponent<IxMessageBarElement, IxMessageBarEvents>({
        tagName: 'ix-message-bar',
        properties: {
            type: 'type',
            dismissible: 'dismissible'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxModalEvents = {
    onDialogClose: EventName<CustomEvent<any>>,
    onDialogDismiss: EventName<CustomEvent<any>>
};

export const IxModal: StencilReactComponent<IxModalElement, IxModalEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxModalElement, IxModalEvents>({
        tagName: 'ix-modal',
        elementClass: IxModalElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onDialogClose: 'dialogClose',
            onDialogDismiss: 'dialogDismiss'
        } as IxModalEvents,
        defineCustomElement: defineIxModal
    })
    : /*@__PURE__*/ createSSRComponent<IxModalElement, IxModalEvents>({
        tagName: 'ix-modal',
        properties: {
            size: 'size',
            animation: 'animation',
            backdrop: 'backdrop',
            closeOnBackdropClick: 'close-on-backdrop-click',
            centered: 'centered',
            closeOnEscape: 'close-on-escape'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxModalContentEvents = NonNullable<unknown>;

export const IxModalContent: StencilReactComponent<IxModalContentElement, IxModalContentEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxModalContentElement, IxModalContentEvents>({
        tagName: 'ix-modal-content',
        elementClass: IxModalContentElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxModalContentEvents,
        defineCustomElement: defineIxModalContent
    })
    : /*@__PURE__*/ createSSRComponent<IxModalContentElement, IxModalContentEvents>({
        tagName: 'ix-modal-content',
        properties: {},
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxModalFooterEvents = NonNullable<unknown>;

export const IxModalFooter: StencilReactComponent<IxModalFooterElement, IxModalFooterEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxModalFooterElement, IxModalFooterEvents>({
        tagName: 'ix-modal-footer',
        elementClass: IxModalFooterElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxModalFooterEvents,
        defineCustomElement: defineIxModalFooter
    })
    : /*@__PURE__*/ createSSRComponent<IxModalFooterElement, IxModalFooterEvents>({
        tagName: 'ix-modal-footer',
        properties: {},
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxModalHeaderEvents = { onCloseClick: EventName<IxModalHeaderCustomEvent<MouseEvent>> };

export const IxModalHeader: StencilReactComponent<IxModalHeaderElement, IxModalHeaderEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxModalHeaderElement, IxModalHeaderEvents>({
        tagName: 'ix-modal-header',
        elementClass: IxModalHeaderElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onCloseClick: 'closeClick' } as IxModalHeaderEvents,
        defineCustomElement: defineIxModalHeader
    })
    : /*@__PURE__*/ createSSRComponent<IxModalHeaderElement, IxModalHeaderEvents>({
        tagName: 'ix-modal-header',
        properties: {
            hideClose: 'hide-close',
            icon: 'icon',
            iconColor: 'icon-color'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxNumberInputEvents = {
    onValueChange: EventName<CustomEvent<number>>,
    onValidityStateChange: EventName<IxNumberInputCustomEvent<ValidityState>>,
    onIxBlur: EventName<CustomEvent<void>>
};

export const IxNumberInput: StencilReactComponent<IxNumberInputElement, IxNumberInputEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxNumberInputElement, IxNumberInputEvents>({
        tagName: 'ix-number-input',
        elementClass: IxNumberInputElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onValueChange: 'valueChange',
            onValidityStateChange: 'validityStateChange',
            onIxBlur: 'ixBlur'
        } as IxNumberInputEvents,
        defineCustomElement: defineIxNumberInput
    })
    : /*@__PURE__*/ createSSRComponent<IxNumberInputElement, IxNumberInputEvents>({
        tagName: 'ix-number-input',
        properties: {
            name: 'name',
            placeholder: 'placeholder',
            value: 'value',
            required: 'required',
            disabled: 'disabled',
            readonly: 'readonly',
            helperText: 'helper-text',
            infoText: 'info-text',
            showTextAsTooltip: 'show-text-as-tooltip',
            validText: 'valid-text',
            warningText: 'warning-text',
            label: 'label',
            invalidText: 'invalid-text',
            pattern: 'pattern',
            min: 'min',
            max: 'max',
            allowedCharactersPattern: 'allowed-characters-pattern',
            showStepperButtons: 'show-stepper-buttons'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxPaginationEvents = {
    onPageSelected: EventName<CustomEvent<number>>,
    onItemCountChanged: EventName<CustomEvent<number>>
};

export const IxPagination: StencilReactComponent<IxPaginationElement, IxPaginationEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxPaginationElement, IxPaginationEvents>({
        tagName: 'ix-pagination',
        elementClass: IxPaginationElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onPageSelected: 'pageSelected',
            onItemCountChanged: 'itemCountChanged'
        } as IxPaginationEvents,
        defineCustomElement: defineIxPagination
    })
    : /*@__PURE__*/ createSSRComponent<IxPaginationElement, IxPaginationEvents>({
        tagName: 'ix-pagination',
        properties: {
            advanced: 'advanced',
            itemCount: 'item-count',
            showItemCount: 'show-item-count',
            count: 'count',
            selectedPage: 'selected-page',
            i18nPage: 'i-1-8n-page',
            i18nOf: 'i-1-8n-of',
            i18nItems: 'i-1-8n-items'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxPaneEvents = {
    onExpandedChanged: EventName<IxPaneCustomEvent<ExpandedChangedEvent>>,
    onVariantChanged: EventName<IxPaneCustomEvent<VariantChangedEvent>>,
    onBorderlessChanged: EventName<IxPaneCustomEvent<BorderlessChangedEvent>>
};

export const IxPane: StencilReactComponent<IxPaneElement, IxPaneEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxPaneElement, IxPaneEvents>({
        tagName: 'ix-pane',
        elementClass: IxPaneElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onExpandedChanged: 'expandedChanged',
            onVariantChanged: 'variantChanged',
            onBorderlessChanged: 'borderlessChanged'
        } as IxPaneEvents,
        defineCustomElement: defineIxPane
    })
    : /*@__PURE__*/ createSSRComponent<IxPaneElement, IxPaneEvents>({
        tagName: 'ix-pane',
        properties: {
            heading: 'heading',
            variant: 'variant',
            hideOnCollapse: 'hide-on-collapse',
            size: 'size',
            borderless: 'borderless',
            expanded: 'expanded',
            composition: 'composition',
            icon: 'icon',
            ignoreLayoutSettings: 'ignore-layout-settings',
            isMobile: 'is-mobile'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxPaneLayoutEvents = NonNullable<unknown>;

export const IxPaneLayout: StencilReactComponent<IxPaneLayoutElement, IxPaneLayoutEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxPaneLayoutElement, IxPaneLayoutEvents>({
        tagName: 'ix-pane-layout',
        elementClass: IxPaneLayoutElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxPaneLayoutEvents,
        defineCustomElement: defineIxPaneLayout
    })
    : /*@__PURE__*/ createSSRComponent<IxPaneLayoutElement, IxPaneLayoutEvents>({
        tagName: 'ix-pane-layout',
        properties: {
            layout: 'layout',
            variant: 'variant',
            borderless: 'borderless'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxPillEvents = NonNullable<unknown>;

export const IxPill: StencilReactComponent<IxPillElement, IxPillEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxPillElement, IxPillEvents>({
        tagName: 'ix-pill',
        elementClass: IxPillElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxPillEvents,
        defineCustomElement: defineIxPill
    })
    : /*@__PURE__*/ createSSRComponent<IxPillElement, IxPillEvents>({
        tagName: 'ix-pill',
        properties: {
            variant: 'variant',
            outline: 'outline',
            icon: 'icon',
            background: 'background',
            pillColor: 'pill-color',
            alignLeft: 'align-left',
            tooltipText: 'tooltip-text'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxPushCardEvents = NonNullable<unknown>;

export const IxPushCard: StencilReactComponent<IxPushCardElement, IxPushCardEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxPushCardElement, IxPushCardEvents>({
        tagName: 'ix-push-card',
        elementClass: IxPushCardElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxPushCardEvents,
        defineCustomElement: defineIxPushCard
    })
    : /*@__PURE__*/ createSSRComponent<IxPushCardElement, IxPushCardEvents>({
        tagName: 'ix-push-card',
        properties: {
            icon: 'icon',
            notification: 'notification',
            heading: 'heading',
            subheading: 'subheading',
            variant: 'variant',
            collapse: 'collapse'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxRadioEvents = {
    onCheckedChange: EventName<CustomEvent<boolean>>,
    onValueChange: EventName<CustomEvent<string>>
};

export const IxRadio: StencilReactComponent<IxRadioElement, IxRadioEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxRadioElement, IxRadioEvents>({
        tagName: 'ix-radio',
        elementClass: IxRadioElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onCheckedChange: 'checkedChange',
            onValueChange: 'valueChange'
        } as IxRadioEvents,
        defineCustomElement: defineIxRadio
    })
    : /*@__PURE__*/ createSSRComponent<IxRadioElement, IxRadioEvents>({
        tagName: 'ix-radio',
        properties: {
            name: 'name',
            value: 'value',
            label: 'label',
            disabled: 'disabled',
            checked: 'checked'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxRadioGroupEvents = { onValueChange: EventName<CustomEvent<string>> };

export const IxRadioGroup: StencilReactComponent<IxRadioGroupElement, IxRadioGroupEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxRadioGroupElement, IxRadioGroupEvents>({
        tagName: 'ix-radio-group',
        elementClass: IxRadioGroupElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onValueChange: 'valueChange' } as IxRadioGroupEvents,
        defineCustomElement: defineIxRadioGroup
    })
    : /*@__PURE__*/ createSSRComponent<IxRadioGroupElement, IxRadioGroupEvents>({
        tagName: 'ix-radio-group',
        properties: {
            helperText: 'helper-text',
            label: 'label',
            value: 'value',
            invalidText: 'invalid-text',
            infoText: 'info-text',
            warningText: 'warning-text',
            validText: 'valid-text',
            showTextAsTooltip: 'show-text-as-tooltip',
            direction: 'direction'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxRowEvents = NonNullable<unknown>;

export const IxRow: StencilReactComponent<IxRowElement, IxRowEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxRowElement, IxRowEvents>({
        tagName: 'ix-row',
        elementClass: IxRowElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxRowEvents,
        defineCustomElement: defineIxRow
    })
    : /*@__PURE__*/ createSSRComponent<IxRowElement, IxRowEvents>({
        tagName: 'ix-row',
        properties: {},
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxSelectEvents = {
    onValueChange: EventName<CustomEvent<string | string[]>>,
    onInputChange: EventName<CustomEvent<string>>,
    onAddItem: EventName<CustomEvent<string>>,
    onIxBlur: EventName<CustomEvent<void>>
};

export const IxSelect: StencilReactComponent<IxSelectElement, IxSelectEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxSelectElement, IxSelectEvents>({
        tagName: 'ix-select',
        elementClass: IxSelectElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onValueChange: 'valueChange',
            onInputChange: 'inputChange',
            onAddItem: 'addItem',
            onIxBlur: 'ixBlur'
        } as IxSelectEvents,
        defineCustomElement: defineIxSelect
    })
    : /*@__PURE__*/ createSSRComponent<IxSelectElement, IxSelectEvents>({
        tagName: 'ix-select',
        properties: {
            name: 'name',
            required: 'required',
            label: 'label',
            warningText: 'warning-text',
            infoText: 'info-text',
            invalidText: 'invalid-text',
            validText: 'valid-text',
            helperText: 'helper-text',
            showTextAsTooltip: 'show-text-as-tooltip',
            value: 'value',
            allowClear: 'allow-clear',
            mode: 'mode',
            editable: 'editable',
            disabled: 'disabled',
            readonly: 'readonly',
            i18nPlaceholder: 'i-1-8n-placeholder',
            i18nPlaceholderEditable: 'i-1-8n-placeholder-editable',
            i18nSelectListHeader: 'i-1-8n-select-list-header',
            i18nNoMatches: 'i-1-8n-no-matches',
            hideListHeader: 'hide-list-header',
            dropdownWidth: 'dropdown-width',
            dropdownMaxWidth: 'dropdown-max-width'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxSelectItemEvents = { onItemClick: EventName<CustomEvent<string>> };

export const IxSelectItem: StencilReactComponent<IxSelectItemElement, IxSelectItemEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxSelectItemElement, IxSelectItemEvents>({
        tagName: 'ix-select-item',
        elementClass: IxSelectItemElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onItemClick: 'itemClick' } as IxSelectItemEvents,
        defineCustomElement: defineIxSelectItem
    })
    : /*@__PURE__*/ createSSRComponent<IxSelectItemElement, IxSelectItemEvents>({
        tagName: 'ix-select-item',
        properties: {
            label: 'label',
            value: 'value',
            selected: 'selected',
            hover: 'hover'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxSliderEvents = { onValueChange: EventName<CustomEvent<number>> };

export const IxSlider: StencilReactComponent<IxSliderElement, IxSliderEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxSliderElement, IxSliderEvents>({
        tagName: 'ix-slider',
        elementClass: IxSliderElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onValueChange: 'valueChange' } as IxSliderEvents,
        defineCustomElement: defineIxSlider
    })
    : /*@__PURE__*/ createSSRComponent<IxSliderElement, IxSliderEvents>({
        tagName: 'ix-slider',
        properties: {
            step: 'step',
            min: 'min',
            max: 'max',
            value: 'value',
            trace: 'trace',
            traceReference: 'trace-reference',
            disabled: 'disabled',
            error: 'error'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxSpinnerEvents = NonNullable<unknown>;

export const IxSpinner: StencilReactComponent<IxSpinnerElement, IxSpinnerEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxSpinnerElement, IxSpinnerEvents>({
        tagName: 'ix-spinner',
        elementClass: IxSpinnerElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxSpinnerEvents,
        defineCustomElement: defineIxSpinner
    })
    : /*@__PURE__*/ createSSRComponent<IxSpinnerElement, IxSpinnerEvents>({
        tagName: 'ix-spinner',
        properties: {
            variant: 'variant',
            size: 'size',
            hideTrack: 'hide-track'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxSplitButtonEvents = { onButtonClick: EventName<IxSplitButtonCustomEvent<MouseEvent>> };

export const IxSplitButton: StencilReactComponent<IxSplitButtonElement, IxSplitButtonEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxSplitButtonElement, IxSplitButtonEvents>({
        tagName: 'ix-split-button',
        elementClass: IxSplitButtonElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onButtonClick: 'buttonClick' } as IxSplitButtonEvents,
        defineCustomElement: defineIxSplitButton
    })
    : /*@__PURE__*/ createSSRComponent<IxSplitButtonElement, IxSplitButtonEvents>({
        tagName: 'ix-split-button',
        properties: {
            variant: 'variant',
            closeBehavior: 'close-behavior',
            outline: 'outline',
            ghost: 'ghost',
            label: 'label',
            icon: 'icon',
            splitIcon: 'split-icon',
            disabled: 'disabled',
            placement: 'placement'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxTabItemEvents = { onTabClick: EventName<IxTabItemCustomEvent<TabClickDetail>> };

export const IxTabItem: StencilReactComponent<IxTabItemElement, IxTabItemEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxTabItemElement, IxTabItemEvents>({
        tagName: 'ix-tab-item',
        elementClass: IxTabItemElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onTabClick: 'tabClick' } as IxTabItemEvents,
        defineCustomElement: defineIxTabItem
    })
    : /*@__PURE__*/ createSSRComponent<IxTabItemElement, IxTabItemEvents>({
        tagName: 'ix-tab-item',
        properties: {
            selected: 'selected',
            disabled: 'disabled',
            small: 'small',
            icon: 'icon',
            rounded: 'rounded',
            counter: 'counter',
            layout: 'layout',
            placement: 'placement'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxTabsEvents = { onSelectedChange: EventName<CustomEvent<number>> };

export const IxTabs: StencilReactComponent<IxTabsElement, IxTabsEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxTabsElement, IxTabsEvents>({
        tagName: 'ix-tabs',
        elementClass: IxTabsElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onSelectedChange: 'selectedChange' } as IxTabsEvents,
        defineCustomElement: defineIxTabs
    })
    : /*@__PURE__*/ createSSRComponent<IxTabsElement, IxTabsEvents>({
        tagName: 'ix-tabs',
        properties: {
            small: 'small',
            rounded: 'rounded',
            selected: 'selected',
            layout: 'layout',
            placement: 'placement'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxTextareaEvents = {
    onValueChange: EventName<CustomEvent<string>>,
    onValidityStateChange: EventName<IxTextareaCustomEvent<ValidityState>>,
    onIxBlur: EventName<CustomEvent<void>>
};

export const IxTextarea: StencilReactComponent<IxTextareaElement, IxTextareaEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxTextareaElement, IxTextareaEvents>({
        tagName: 'ix-textarea',
        elementClass: IxTextareaElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onValueChange: 'valueChange',
            onValidityStateChange: 'validityStateChange',
            onIxBlur: 'ixBlur'
        } as IxTextareaEvents,
        defineCustomElement: defineIxTextarea
    })
    : /*@__PURE__*/ createSSRComponent<IxTextareaElement, IxTextareaEvents>({
        tagName: 'ix-textarea',
        properties: {
            name: 'name',
            placeholder: 'placeholder',
            value: 'value',
            required: 'required',
            disabled: 'disabled',
            readonly: 'readonly',
            helperText: 'helper-text',
            infoText: 'info-text',
            showTextAsTooltip: 'show-text-as-tooltip',
            validText: 'valid-text',
            warningText: 'warning-text',
            label: 'label',
            invalidText: 'invalid-text',
            textareaHeight: 'textarea-height',
            textareaWidth: 'textarea-width',
            textareaRows: 'textarea-rows',
            textareaCols: 'textarea-cols',
            resizeBehavior: 'resize-behavior',
            maxLength: 'max-length',
            minLength: 'min-length'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxTileEvents = NonNullable<unknown>;

export const IxTile: StencilReactComponent<IxTileElement, IxTileEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxTileElement, IxTileEvents>({
        tagName: 'ix-tile',
        elementClass: IxTileElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxTileEvents,
        defineCustomElement: defineIxTile
    })
    : /*@__PURE__*/ createSSRComponent<IxTileElement, IxTileEvents>({
        tagName: 'ix-tile',
        properties: { size: 'size' },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxTimePickerEvents = {
    onTimeSelect: EventName<CustomEvent<string>>,
    onTimeChange: EventName<CustomEvent<string>>
};

export const IxTimePicker: StencilReactComponent<IxTimePickerElement, IxTimePickerEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxTimePickerElement, IxTimePickerEvents>({
        tagName: 'ix-time-picker',
        elementClass: IxTimePickerElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {
            onTimeSelect: 'timeSelect',
            onTimeChange: 'timeChange'
        } as IxTimePickerEvents,
        defineCustomElement: defineIxTimePicker
    })
    : /*@__PURE__*/ createSSRComponent<IxTimePickerElement, IxTimePickerEvents>({
        tagName: 'ix-time-picker',
        properties: {
            format: 'format',
            corners: 'corners',
            standaloneAppearance: 'standalone-appearance',
            showHour: 'show-hour',
            showMinutes: 'show-minutes',
            showSeconds: 'show-seconds',
            time: 'time',
            timeReference: 'time-reference',
            textSelectTime: 'text-select-time',
            textTime: 'text-time'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxToastEvents = { onCloseToast: EventName<CustomEvent<any>> };

export const IxToast: StencilReactComponent<IxToastElement, IxToastEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxToastElement, IxToastEvents>({
        tagName: 'ix-toast',
        elementClass: IxToastElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onCloseToast: 'closeToast' } as IxToastEvents,
        defineCustomElement: defineIxToast
    })
    : /*@__PURE__*/ createSSRComponent<IxToastElement, IxToastEvents>({
        tagName: 'ix-toast',
        properties: {
            type: 'type',
            toastTitle: 'toast-title',
            autoCloseDelay: 'auto-close-delay',
            autoClose: 'auto-close',
            icon: 'icon',
            iconColor: 'icon-color'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxToastContainerEvents = NonNullable<unknown>;

export const IxToastContainer: StencilReactComponent<IxToastContainerElement, IxToastContainerEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxToastContainerElement, IxToastContainerEvents>({
        tagName: 'ix-toast-container',
        elementClass: IxToastContainerElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxToastContainerEvents,
        defineCustomElement: defineIxToastContainer
    })
    : /*@__PURE__*/ createSSRComponent<IxToastContainerElement, IxToastContainerEvents>({
        tagName: 'ix-toast-container',
        properties: {
            containerId: 'container-id',
            containerClass: 'container-class',
            position: 'position'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxToggleEvents = { onCheckedChange: EventName<CustomEvent<boolean>> };

export const IxToggle: StencilReactComponent<IxToggleElement, IxToggleEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxToggleElement, IxToggleEvents>({
        tagName: 'ix-toggle',
        elementClass: IxToggleElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onCheckedChange: 'checkedChange' } as IxToggleEvents,
        defineCustomElement: defineIxToggle
    })
    : /*@__PURE__*/ createSSRComponent<IxToggleElement, IxToggleEvents>({
        tagName: 'ix-toggle',
        properties: {
            name: 'name',
            value: 'value',
            checked: 'checked',
            disabled: 'disabled',
            indeterminate: 'indeterminate',
            textOn: 'text-on',
            textOff: 'text-off',
            textIndeterminate: 'text-indeterminate',
            hideText: 'hide-text',
            required: 'required'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxToggleButtonEvents = { onPressedChange: EventName<CustomEvent<boolean>> };

export const IxToggleButton: StencilReactComponent<IxToggleButtonElement, IxToggleButtonEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxToggleButtonElement, IxToggleButtonEvents>({
        tagName: 'ix-toggle-button',
        elementClass: IxToggleButtonElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onPressedChange: 'pressedChange' } as IxToggleButtonEvents,
        defineCustomElement: defineIxToggleButton
    })
    : /*@__PURE__*/ createSSRComponent<IxToggleButtonElement, IxToggleButtonEvents>({
        tagName: 'ix-toggle-button',
        properties: {
            variant: 'variant',
            outline: 'outline',
            ghost: 'ghost',
            disabled: 'disabled',
            loading: 'loading',
            icon: 'icon',
            pressed: 'pressed'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxTooltipEvents = NonNullable<unknown>;

export const IxTooltip: StencilReactComponent<IxTooltipElement, IxTooltipEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxTooltipElement, IxTooltipEvents>({
        tagName: 'ix-tooltip',
        elementClass: IxTooltipElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxTooltipEvents,
        defineCustomElement: defineIxTooltip
    })
    : /*@__PURE__*/ createSSRComponent<IxTooltipElement, IxTooltipEvents>({
        tagName: 'ix-tooltip',
        properties: {
            for: 'for',
            titleContent: 'title-content',
            interactive: 'interactive',
            placement: 'placement',
            showDelay: 'show-delay',
            hideDelay: 'hide-delay',
            animationFrame: 'animation-frame'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxTypographyEvents = NonNullable<unknown>;

export const IxTypography: StencilReactComponent<IxTypographyElement, IxTypographyEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxTypographyElement, IxTypographyEvents>({
        tagName: 'ix-typography',
        elementClass: IxTypographyElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxTypographyEvents,
        defineCustomElement: defineIxTypography
    })
    : /*@__PURE__*/ createSSRComponent<IxTypographyElement, IxTypographyEvents>({
        tagName: 'ix-typography',
        properties: {
            format: 'format',
            textColor: 'text-color',
            bold: 'bold',
            textDecoration: 'text-decoration'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxUploadEvents = { onFilesChanged: EventName<IxUploadCustomEvent<Array<File>>> };

export const IxUpload: StencilReactComponent<IxUploadElement, IxUploadEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxUploadElement, IxUploadEvents>({
        tagName: 'ix-upload',
        elementClass: IxUploadElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onFilesChanged: 'filesChanged' } as IxUploadEvents,
        defineCustomElement: defineIxUpload
    })
    : /*@__PURE__*/ createSSRComponent<IxUploadElement, IxUploadEvents>({
        tagName: 'ix-upload',
        properties: {
            accept: 'accept',
            multiple: 'multiple',
            multiline: 'multiline',
            disabled: 'disabled',
            state: 'state',
            selectFileText: 'select-file-text',
            loadingText: 'loading-text',
            uploadFailedText: 'upload-failed-text',
            uploadSuccessText: 'upload-success-text',
            i18nUploadFile: 'i-1-8n-upload-file',
            i18nUploadDisabled: 'i-1-8n-upload-disabled'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxValidationTooltipEvents = NonNullable<unknown>;

export const IxValidationTooltip: StencilReactComponent<IxValidationTooltipElement, IxValidationTooltipEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxValidationTooltipElement, IxValidationTooltipEvents>({
        tagName: 'ix-validation-tooltip',
        elementClass: IxValidationTooltipElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxValidationTooltipEvents,
        defineCustomElement: defineIxValidationTooltip
    })
    : /*@__PURE__*/ createSSRComponent<IxValidationTooltipElement, IxValidationTooltipEvents>({
        tagName: 'ix-validation-tooltip',
        properties: {
            message: 'message',
            placement: 'placement',
            suppressAutomaticPlacement: 'suppress-automatic-placement'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxWorkflowStepEvents = NonNullable<unknown>;

export const IxWorkflowStep: StencilReactComponent<IxWorkflowStepElement, IxWorkflowStepEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxWorkflowStepElement, IxWorkflowStepEvents>({
        tagName: 'ix-workflow-step',
        elementClass: IxWorkflowStepElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: {} as IxWorkflowStepEvents,
        defineCustomElement: defineIxWorkflowStep
    })
    : /*@__PURE__*/ createSSRComponent<IxWorkflowStepElement, IxWorkflowStepEvents>({
        tagName: 'ix-workflow-step',
        properties: {
            vertical: 'vertical',
            disabled: 'disabled',
            status: 'status',
            clickable: 'clickable',
            selected: 'selected',
            position: 'position'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });

type IxWorkflowStepsEvents = { onStepSelected: EventName<CustomEvent<number>> };

export const IxWorkflowSteps: StencilReactComponent<IxWorkflowStepsElement, IxWorkflowStepsEvents> = typeof window !== 'undefined'
    ? /*@__PURE__*/ createComponent<IxWorkflowStepsElement, IxWorkflowStepsEvents>({
        tagName: 'ix-workflow-steps',
        elementClass: IxWorkflowStepsElement,
        // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
        react: React,
        events: { onStepSelected: 'stepSelected' } as IxWorkflowStepsEvents,
        defineCustomElement: defineIxWorkflowSteps
    })
    : /*@__PURE__*/ createSSRComponent<IxWorkflowStepsElement, IxWorkflowStepsEvents>({
        tagName: 'ix-workflow-steps',
        properties: {
            vertical: 'vertical',
            clickable: 'clickable',
            selectedIndex: 'selected-index'
        },
        hydrateModule: import('@siemens/ix/hydrate')
    });
